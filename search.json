[
  {
    "objectID": "resources/science_communication/presentations.html",
    "href": "resources/science_communication/presentations.html",
    "title": "Presentation Tips",
    "section": "",
    "text": "Back to Science Communication Resources\nTen simple rules for making good oral presentations\nTen simple rules for short and swift presentations"
  },
  {
    "objectID": "resources/science_communication/writing_pages/manuscripts.html",
    "href": "resources/science_communication/writing_pages/manuscripts.html",
    "title": "Manuscripts",
    "section": "",
    "text": "Back to Writing Resources\nWriting readable sentences\nCreating coherent paragraphs\nTen simple rules for structuring papers\nTen simple rules for responsible referencing\nTen simple rules for collaboratively writing a multi-authored paper\n\nMore from the PLoS Curated Collections"
  },
  {
    "objectID": "resources/data_sources.html",
    "href": "resources/data_sources.html",
    "title": "Data Sources",
    "section": "",
    "text": "DHS, MAP, etc.\n\n\n\n\n\n\n\n\n\n\n\nDHS Surveys\n\n\n\n\n\n\n\n\n\n\n\n\n\nMAP Rasters\n\n\n\n\n\n\n\n\n\n\nNo matching items",
    "crumbs": [
      "Additional Resources",
      "Data Sources"
    ]
  },
  {
    "objectID": "resources/coding_resources/git_resources.html",
    "href": "resources/coding_resources/git_resources.html",
    "title": "Git",
    "section": "",
    "text": "Back to Coding Resources\nGit is a popular version control software to manage codes, especially in a collaborative environment.\n\n\n\n\n\n\n\nGit tutorial (2023 FE edition)\n\n\n\n\n\n\n\n\n\n\nNo matching items\n\n\nTen simple rules for taking advantage of Git and GitHub"
  },
  {
    "objectID": "resources/coding_resources/git_resources/git_intro_fe2023.html",
    "href": "resources/coding_resources/git_resources/git_intro_fe2023.html",
    "title": "Git tutorial (2023 FE edition)",
    "section": "",
    "text": "This tutorial is created specifically for faculty enrichment purpose, please adjust accordingly if you’re not using it in this context.\nGit is a popular version control software to manage codes, especially in a collaborative environment.\nHere is a comic from “Piled Higher and Deeper” by Jorge Cham regarding version control:\n Git allows us to make changes to our code, and say if we didn’t like the changes, we can always go back to the older versions of the code. In a collaborative environment, our colleagues can make changes to our codes, and we can track who’s made what changes to the code, and undo it if necessary. If all of these sounds familiar, yes it does feel like we that track changes function in say Microsoft Word, or the version control function available in Dropbox. The difference is that you can designate a folder as your “Git repository”, and you decide which file inside this folder get version controlled.\nWhile Git is a software that lives inside your computer, GitHub is an internet hosting provider that can host your Git repository. For example, many Python packages such as pandas is hosted on GitHub. Our FE examples and website are also hosted in GitHub, here and here.\nIn this tutorial, we will:\n\nFork the FE example repository to our personal account.\nSetup our Quest environment to communicate with GitHub.\nClone the forked repository to Quest.\nCommit some of our changes, and push to GitHub.\n\n\nForking\nWe start with going to the GitHub repository of our FE-2023-examples repository. Make sure that you are signed into your own GitHub account at this point. Look for the buttons near the top right section of the page: Watch, Fork and Star. Clicking on the Fork button will lead you to a page about “Create a new fork”. By clicking on the Create fork button, you would have created a fork of the FE-2023-examples to your own account.\nWhat does this forking mean? Essentially you copy and paste the existing repository to your account. This allows you to make changes on the repository, without affecting the main repository. Often, we don’t necessarily have editing access to a repository, or we simply don’t want to accidentally make any changes to the “main” one. Forking allows us to make modification to the codes without that fear! Furthermore, we can, e.g., make meaningful changes to the repository, and then ask the original repository’s owner to review and adapt our changes to their repository through a pull request. If the original repository made some updates, we can also synchronize our forked repository with its upstream.\n\n\nSetting up Quest environment for GitHub\nNow that we have a forked repository, we want to bring the repository to our work machine, known as “clone”. Since this involves getting our work machine to talk to GitHub, we need to make sure this process is secured. Typically, we would enter our username and password when prompted, however, this process becomes cumbersome as GitHub added additional security measure. As a result, we find it easiest to add SSH keys of our Quest environment to GitHub.\nYou can find instruction to do them in details:\n\nGenerate a new SSH key\nAdding a new SSH key to your GitHub account\n\nHere’s a condensed version of it…\n\nLogin to your Quest via SSH\n\nPaste the following text ssh-keygen -t ed25519 -C \"your_email@example.com\" to your terminal, substitute the email address to the one you use for your GitHub.\n\nPress Enter when prompted (you unlikely need to change the file for the key).\nChoose a passphrase or leave it empty when prompted.\nDone with Part 1, now paste this pbcopy &lt; ~/.ssh/id_ed25519.pub to your terminal. This basically copy the content of the newly generated key to your clipboard.\nIn GitHub (go to github.com in case youre lost), click on the top right corner which should display your profile photo.\n‘Settings’ -&gt; ‘SSH and GPG keys’ -&gt; ‘New SSH key’\nPaste into the Key section. Give your key a name in the Title, say Quest.\nClick Add SSH key and… you should be done with this!\n\n\n\nClone repository\nLet’s navigate back to the forked repository page in GitHub. You should see a green button that says “Code”. When you click on it, you can see 3 tabs: “Local”, “SSH” and “GitHub CLI”. Click on the “SSH” tab, and copy the URL that’s right below it.\nNow go back to your terminal that’s SSH into Quest. Navigate to the desired directory that will receive the repository. The following command will clone your forked repository hosted in GitHub into Quest:\ngit clone &lt;paste_your_url_here&gt;\nIf nothing goes wrong, you can check the content of your directory (e.g., by typing ls), and you should now see a new folder with the name of your repository (most likely FE-2023-examples). You have now cloned it to Quest!\n\n\nMaking changes and git commit\nWe make changes or add more files to our repository locally all the time. Git would take note of all these changes, but until we “commit” these changes, they would only remain a local change that can be discarded.\nLet’s navigate to the repository itself, and type git status, which tells you the general status of your repository. For now, you’ll most likely see:\nOn branch main\nYour branch is up-to-date with 'origin/main'.\nnothing to commit, working directory clean\nIn this case, it is saying that your repository is synchronized with the one in GitHub, and that you’ve made no changes to the local repository yet.\nLet’s start out by changing something and see what git does. Say, we can modify the README.md, adding a sentence after the first sentence of the README file, say “This is ’s version!”. Now save your changes, and run git status again. Now you’ll see this instead:\nChanges not staged for commit:\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\n  (use \"git checkout -- &lt;file&gt;...\" to discard changes in working directory)\n\n        modified:   README.md\nGit has been tracking the file README.md and it has detected changes in that file. While this is quite obvious to us what has changed, it is not always so when you working with lots of code. It is helpful to use following command to see what has changed in the file: git diff.\nNext, to “commit” to the changes you made to README.md, we use git add to “stage” the file for changes. We don’t immediately commit changes in git, instead we put those changes in a “staging ground” first. Imagine you are sending documents to some government agencies for some application, you don’t immediately send one document (say in total you have four documents to send) out right? You might instead put the document in an envelope, and wait until you have all four documents inside the envelope before you seal it and send them off. Similar concept here where we “stage” the file(s) first before committing.\nOnce we stage the README.md, check git status again. Now you can see README.md turns green colour, and you see Changes to be committed now. We can commit the changes now, but we can also wait for more changes.\nIn this case, let’s create a new file, say a hello_world.py, with a line that prints out “Hello World!”. Now check git status again, and you can see that the new file appears in another section called Untracked files:. This file is new to git, and git is not currently tracking the changes to the file. It only starts tracking after you add and commit the file to your repository.\nWe can now also git add the hello world file. Check git status.\nOK let’s say we are now satisfied with the changes we made so far. We are now ready to commit the staged file to our repository. To do so:\ngit commit -m \"&lt;your commit message here&gt;\"\nTypically we want to have a commit message that is short, and yet informative about your changes. Some softwares would even ask you to put a message with less than 50 characters. In this case, we can say Add my name to README and add hello world.\nNow we committed our changes. To be sure, we can check git log. This log shows us all the commits that were done and by whom they were done, from the newest to the oldest. You should see your commit at the top of the log.\nNow this commit is done locally, meaning that if you go to GitHub, you would not see any of your commit yet! You can also see that something like Your branch is ahead of 'origin/main' by 1 commit. in git status. This means that there’s 1 commit in your local git that is not captured by your remote git, i.e., GitHub. In order to synchronize, we can use git push. This basically “push” the commit to the remote repository in GitHub.\nNow if you look over to your GitHub repository, you should see the commit there now with the corresponding changes!\nThese are some of the basics of git, let’s practice creating two more commits, 1 with changes to your hello world script, and 1 deleting your hello world script.\n\n\nMore Git?\nThere are more to git than all these, hopefully we get to learn more as we start using git more and more.\nThe software carpentry has a good tutorial for you to learn more about git."
  },
  {
    "objectID": "resources/coding_resources.html",
    "href": "resources/coding_resources.html",
    "title": "Coding Resources",
    "section": "",
    "text": "For python, R, github, and QUEST\nThe 7 Most Common Types of Errors in Programming, and How to Avoid Them\n\n\n\n\n\n\n\n\n\n\n\nPython\n\n\n\n\n\n\n\n\n\n\n\n\n\nR\n\n\n\n\n\n\n\n\n\n\n\n\n\nGit\n\n\n\n\n\n\n\n\n\n\n\n\n\nQUEST\n\n\n\n\n\n\n\n\n\n\nNo matching items",
    "crumbs": [
      "Additional Resources",
      "Coding Resources"
    ]
  },
  {
    "objectID": "resources/data_sources/MAP_pages/MAP_rasters_walkthrough.html",
    "href": "resources/data_sources/MAP_pages/MAP_rasters_walkthrough.html",
    "title": "MAP Rasters Walkthrough",
    "section": "",
    "text": "In this page, we demonstrate how to extract values from maps using R. Often we have maps showing values for each pixels, for example, ITN access and usage map with 5km x 5km resolutions or Population counts with 1km x 1km resolutions. To convert these maps to useful estimates for our model, we need to extract the values underlying each pixel in the map, within the geographical area of interest. For example, if the map covers the entire Sub-Saharan Africa, and all we need is values from Burkina Faso, we will need to only extract the pixels within the country’s boundary. Then we would need to aggregate the values of the pixels, to obtain some form of country-wide estimate. Similar analogy is applicable to region, district and province.\nWe use the sp and raster packages in R to achieve this. For the first example, we will walk through extracting ITN usage estimate for a Burkina Faso district of Kampti."
  },
  {
    "objectID": "resources/data_sources/MAP_pages/MAP_rasters_walkthrough.html#introduction",
    "href": "resources/data_sources/MAP_pages/MAP_rasters_walkthrough.html#introduction",
    "title": "MAP Rasters Walkthrough",
    "section": "",
    "text": "In this page, we demonstrate how to extract values from maps using R. Often we have maps showing values for each pixels, for example, ITN access and usage map with 5km x 5km resolutions or Population counts with 1km x 1km resolutions. To convert these maps to useful estimates for our model, we need to extract the values underlying each pixel in the map, within the geographical area of interest. For example, if the map covers the entire Sub-Saharan Africa, and all we need is values from Burkina Faso, we will need to only extract the pixels within the country’s boundary. Then we would need to aggregate the values of the pixels, to obtain some form of country-wide estimate. Similar analogy is applicable to region, district and province.\nWe use the sp and raster packages in R to achieve this. For the first example, we will walk through extracting ITN usage estimate for a Burkina Faso district of Kampti."
  },
  {
    "objectID": "resources/data_sources/MAP_pages/MAP_rasters_walkthrough.html#example-itn-usage-of-kampti-district",
    "href": "resources/data_sources/MAP_pages/MAP_rasters_walkthrough.html#example-itn-usage-of-kampti-district",
    "title": "MAP Rasters Walkthrough",
    "section": "Example: ITN usage of Kampti District",
    "text": "Example: ITN usage of Kampti District\nTo achieve this, it is important to look at the “ingredients” needed: - Shape file for Burkina Faso and its district (You need to unzip this) - 2016 ITN usage map (note that this is originally covering the entire of SSA, but is cropped to reduce filesize) - 2016 estimated population distrbution map of Burkina Faso\nShape file serves as a “cookie cutter” such that we can ensure to extract values within the boundary of a district or area of interest. We will discuss about the use of population distribution map later.\nHere are the code walkthrough. First we import the libraries, and load the input using raster() and shapefile() functions.\n\nlibrary(sp)\nlibrary(raster)\n\nshp &lt;- shapefile(\"data/burkina_70DS.shp\")\nshp\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 70 \nextent      : 224822.8, 1088963, 1040345, 1669090  (xmin, xmax, ymin, ymax)\ncrs         : +proj=utm +zone=30 +datum=WGS84 +units=m +no_defs \nvariables   : 11\nnames       : OBJECTID,  NOMDEP, SinistreIn, Innonde, NOMPROVINC,         NOMREGION, CommuneCib, CoomuneRis,    Shape_Leng,    Shape_Area, DS \nmin values  :        7, BANFORA,          0,       0,       BALE, BOUCLE DU MOUHOUN,          0,          0,  22326.136677, 28397716.1216,  0 \nmax values  :      107,  ZORGHO,       3179,       1, ZOUNDWEOGO,         SUD-OUEST,          1,          1, 656058.771223, 14845528347.3, 69 \n\nitn_raster &lt;- raster(\"data/ITN2016.tif\")\nitn_raster\n\nclass      : RasterLayer \ndimensions : 156, 216, 33696  (nrow, ncol, ncell)\nresolution : 0.04166665, 0.04166665  (x, y)\nextent     : -6.00007, 2.999927, 8.999972, 15.49997  (xmin, xmax, ymin, ymax)\ncrs        : +proj=longlat +datum=WGS84 +no_defs \nsource     : ITN2016.tif \nnames      : ITN2016 \nvalues     : 0.09760008, 0.8092381  (min, max)\n\npop_raster &lt;- raster(\"data/bfa_ppp_2016_1km_Aggregated_UNadj.tif\")\npop_raster\n\nclass      : RasterLayer \ndimensions : 682, 951, 648582  (nrow, ncol, ncell)\nresolution : 0.008333333, 0.008333333  (x, y)\nextent     : -5.517917, 2.407083, 9.407917, 15.09125  (xmin, xmax, ymin, ymax)\ncrs        : +proj=longlat +datum=WGS84 +no_defs \nsource     : bfa_ppp_2016_1km_Aggregated_UNadj.tif \nnames      : bfa_ppp_2016_1km_Aggregated_UNadj \nvalues     : 0.2217675, 6855.859  (min, max)\n\n\nThe summaries for each of the object suggests that shp has a different CRS (Coordinate Reference System) than others. The CRS of all objects must align for our work here, and it’s easier to convert CRS in shp to that of other raster objects.\n\nlibrary(rgdal)\n\nPlease note that rgdal will be retired by the end of 2023,\nplan transition to sf/stars/terra functions using GDAL and PROJ\nat your earliest convenience.\n\nrgdal: version: 1.5-32, (SVN revision 1176)\nGeospatial Data Abstraction Library extensions to R successfully loaded\nLoaded GDAL runtime: GDAL 3.6.4, released 2023/04/17\nPath to GDAL shared files: /usr/share/gdal\n GDAL does not use iconv for recoding strings.\nGDAL binary built with GEOS: TRUE \nLoaded PROJ runtime: Rel. 9.1.1, December 1st, 2022, [PJ_VERSION: 911]\nPath to PROJ shared files: /home/runner/.local/share/proj:/usr/share/proj\nPROJ CDN enabled: FALSE\nLinking to sp version:1.5-0\nTo mute warnings of possible GDAL/OSR exportToProj4() degradation,\nuse options(\"rgdal_show_exportToProj4_warnings\"=\"none\") before loading sp or rgdal.\n\nshp &lt;- spTransform(shp, crs(itn_raster))\n\nNow we can plot and see the raster and shapes. Here’s ITN raster.\n\nplot(itn_raster)\nplot(shp, add=T)\n\n\n\n\n\n\n\n\nAnd here’s population raster. There are a little misalignment in the north for this raster, but for our purpose, this problem is not too big.\n\nplot(pop_raster)\nplot(shp, add=T)\n\n\n\n\n\n\n\n\n\nNaïve Extraction\nThe most naïve way of extracting values for each district here is to directly use the extract() function. When supplied with a set of polygons (shapes), the function pull the values underlying all the pixels within the shapes, and aggregate them, say by taking means. The function can be supplied by a set of points too.\n\ndf &lt;- shp@data # Pull data out of shapefiles (District names etc.)\n\n# Extract and aggregate using mean function\ndf$itn_cov &lt;- extract(itn_raster, shp, fun=mean)\n\n# Look at values for Bittou district\ndf[df$NOMDEP=='BITTOU', c('NOMDEP', 'NOMREGION', 'itn_cov')]\n\n   NOMDEP  NOMREGION   itn_cov\n53 BITTOU CENTRE-EST 0.7512201\n\n\n\n\nPopulation-weighted extraction\nSometimes averaging each pixel without weights doesn’t feel quite “right”: Pixels inside uninhabited forests aren’t the same as pixels inside a crowded town when we care about ITN coverage. Therefore, we may elect to use population map to weight the pixels and obtain a population-weighted estimate for each district.\n\n# First try to stack the ITN and Population map\n## To do so, need to ensure two maps cover same area\n## Crop ITN raster according to Population raster\nitn_raster_cr &lt;- crop(itn_raster, pop_raster)\n## Lower resolution of Population raster to the level of ITN raster\npop_raster_res &lt;- resample(pop_raster, itn_raster_cr, )\n\n## Stacking the raster\nitn_pop_stack &lt;- stack(itn_raster_cr, pop_raster_res)\n\n# Extract the raster stack according to the shapes, no aggregation\nout &lt;- extract(itn_pop_stack, shp)\n\n# Define functions to calculate weighted average from output matrix\nweighted_avg &lt;- function (x, w) sum(x * w) / sum(w)\nestim_from_matrix &lt;- function (mat) {\n  mat &lt;- na.omit(mat)\n  return(weighted_avg(mat[,1], mat[,2]))\n}\n\nWithout specifying the aggregating function for extract(), the function pull every single pixel out of the raster stack. Result is a list of matrices, first column is ITN coverage, second column is population count. So we define a function estim_from_matrix() that would calculate weighted average of first column according to second column. sapply() applies the function to each element (matrix) of the list, and combine the output nicely into a vector.\n\ndf2 &lt;- shp@data\ndf2$itn_cov &lt;- sapply(out, estim_from_matrix)\n\ndf2[df2$NOMDEP=='BITTOU', c('NOMDEP', 'NOMREGION', 'itn_cov')]\n\n   NOMDEP  NOMREGION   itn_cov\n53 BITTOU CENTRE-EST 0.7475682\n\n\nThe ITN coverage estimates from population-weighted method is almost the same as the naive method. This is potentially due to the ITN estimates within the district being relatively homogeneous."
  },
  {
    "objectID": "resources/data_sources/DHS_pages/DHS Surveys.html",
    "href": "resources/data_sources/DHS_pages/DHS Surveys.html",
    "title": "DHS Surveys",
    "section": "",
    "text": "Understanding the Demographic and Health Surveys"
  },
  {
    "objectID": "resources/data_sources/DHS_pages/DHS Surveys.html#dhs-surveys",
    "href": "resources/data_sources/DHS_pages/DHS Surveys.html#dhs-surveys",
    "title": "DHS Surveys",
    "section": "DHS Surveys",
    "text": "DHS Surveys"
  },
  {
    "objectID": "resources/data_sources/DHS_pages/DHS Surveys.html#use-cases",
    "href": "resources/data_sources/DHS_pages/DHS Surveys.html#use-cases",
    "title": "DHS Surveys",
    "section": "Use Cases",
    "text": "Use Cases"
  },
  {
    "objectID": "resources/data_sources/DHS_pages/DHS Surveys.html#limitations",
    "href": "resources/data_sources/DHS_pages/DHS Surveys.html#limitations",
    "title": "DHS Surveys",
    "section": "Limitations",
    "text": "Limitations"
  },
  {
    "objectID": "resources/data_sources/DHS_pages/DHS Portal.html",
    "href": "resources/data_sources/DHS_pages/DHS Portal.html",
    "title": "DHS Portal",
    "section": "",
    "text": "Access DHS data through an online portal"
  },
  {
    "objectID": "resources/data_sources/DHS_pages/DHS Portal.html#using-the-dhs-portal",
    "href": "resources/data_sources/DHS_pages/DHS Portal.html#using-the-dhs-portal",
    "title": "DHS Portal",
    "section": "Using the DHS Portal",
    "text": "Using the DHS Portal"
  },
  {
    "objectID": "resources/articles/journal_club_articles/journal_club_8.html",
    "href": "resources/articles/journal_club_articles/journal_club_8.html",
    "title": "Journal Club 8: Cross-Model Comparisons",
    "section": "",
    "text": "Back to Journal Club\nPublic health impact and cost-effectiveness of the RTS, S/AS01 malaria vaccine: a systematic comparison of predictions from four mathematical models\nContext: This week we are covering other malaria models, so we will discuss a paper that looks at the impact and cost-effectiveness of a novel intervention (the RTS,S vaccine) across four mathematical models - including EMOD.\nPlease read the journal club paper and recommended additional reading, and come prepared to discuss your thoughts. If you are facilitating the session, prepare an overview of the paper and at least four guiding questions.\nLeader:\n\nLearning Objectives\n\nUnderstand the strengths and limitations of the different models used to assess the impact of RTS,S\n\nCritically evaluate the specific assumptions and parameters used by each model, and how these may affect their predictions\n\nProvide reasons for comparing predictions from multiple models\n\n\n\nGuiding Questions\n\n\n\n\n\n\n\n\nRecommended further reading\n\nSmith, N.R., Trauer, J.M., Gambhir, M. et al. Agent-based models of malaria transmission: a systematic review. Malar J 17, 299 (2018)."
  },
  {
    "objectID": "resources/articles/journal_club_articles/journal_club_7.html",
    "href": "resources/articles/journal_club_articles/journal_club_7.html",
    "title": "Journal Club 7: Diagnostics for Malaria Elimination",
    "section": "",
    "text": "Back to Journal Club\nAssessing the impact of next-generation rapid diagnostic tests on Plasmodium falciparum malaria elimination strategies\nContext: Last week we discussed diagnostics and the within-host component of EMOD. This week’s journal club will dive into how we think about these for decision-making as well as model calibration.\nPlease read the journal club paper and recommended additional reading, and come prepared to discuss your thoughts. If you are facilitating the session, prepare an overview of the paper and at least four guiding questions.\nLeader:\n\nLearning Objectives\n\nUnderstand similarities and differences between compartmental (Imperal College, Openmalaria) and agent-based (MAEMOD) models\n\nLearn about mass-screen-and-treat programs, focal MSAT, and reactive strategies to target the asymptomatic infectious reservoir\n\nExplore the impact of diagnostic thresholds on the success of mass screening intervention strategies\n\nDiscuss the relationship between environmental or within-host factors and the success of mass screening intervention strategies\n\n\n\nGuiding Questions\n\n\n\n\n\n\n\n\nRecommended further reading\n\nGerardin, J., Ouédraogo, A.L., McCarthy, K.A. et al. Characterization of the infectious reservoir of malaria with an agent-based model calibrated to age-stratified parasite densities and infectiousness. Malar J 14, 231 (2015)."
  },
  {
    "objectID": "resources/articles/journal_club_articles/journal_club_5.html",
    "href": "resources/articles/journal_club_articles/journal_club_5.html",
    "title": "Journal Club 5: Subnational Tailoring in Tanzania",
    "section": "",
    "text": "Back to Journal Club\nSub-national tailoring of malaria interventions in Mainland Tanzania: simulation of the impact of strata-specific intervention combinations using modelling\nContext: Last week we revisited the application of malaria modeling within the HBHI and SNT contexts. This week we will read a paper that addressed similar questions but in a different model to support the national malaria program in Tanzania. An additional use-case that we read earlier in the program is included as recommended reading.\nPlease read the journal club paper and recommended read and come prepared to discuss your thoughts. If you are facilitating the session, prepare an overview of the paper and at least four guiding questions.\nLeader:\n\nLearning Objectives\n\nDiscuss specificities and differences of subnational tailoring of malaria interventions and stratification in the example from Tanzania\n\nCompare to earlier SNT use-case in Nigeria\n\nDescribe how heterogeneities in transmission and prevalence can affect intervention impact and model outputs\n\n\n\nGuiding Questions\n\n\n\n\n\n\n\n\nRecommended additional reading\n\nOzodiegwu, I. D., Ambrose, M., Galatas, B., Runge, M., Nandi, A., Okuneye, K., … & Gerardin, J. (2023). Application of mathematical modelling to inform national malaria intervention planning in Nigeria. Malaria Journal, 22(1), 1-19."
  },
  {
    "objectID": "resources/articles/journal_club_articles/journal_club_6.html",
    "href": "resources/articles/journal_club_articles/journal_club_6.html",
    "title": "Journal Club 6: Reactive Case Detection in Zambia",
    "section": "",
    "text": "Back to Journal Club\nEffectiveness of reactive case detection for malaria elimination in three archetypical transmission settings: a modelling study\nContext: This week we are discussing reactive interventions so we will examine a paper on reactive case detection in various transmission settings.\nPlease read the journal club paper and recommended additional reading, and come prepared to discuss your thoughts. If you are facilitating the session, prepare an overview of the paper and at least four guiding questions.\nLeader:\n\nLearning Objectives\n\nUnderstand how reactive case detection can impact malaria control & progress toward elimination\n\nDiscuss the efficacy of reactive case detection in various transmission settings\n\nDiscuss the use of archetypal settings in malaria modeling\n\n\n\nGuiding Questions\n\n\n\n\n\n\n\n\nAdditional Recommended Reading\nPerera, R., Caldera, A. & Wickremasinghe, A.R. Reactive Case Detection (RACD) and foci investigation strategies in malaria control and elimination: a review. Malar J 19, 401 (2020)"
  },
  {
    "objectID": "resources/articles/journal_club_articles/journal_club_0.html",
    "href": "resources/articles/journal_club_articles/journal_club_0.html",
    "title": "Journal Club 0: Use of Mathematical Modeling in WHO Guidelines",
    "section": "",
    "text": "Back to Journal Club\nContribution and quality of mathematical modeling evidence in World Health Organization guidelines: A systematic review\nContext: For the first journal club, we will discuss a systematic review which identifies and assesses WHO guideline recommendations that include evidence from mathematical modeling studies. The goal is to take a high-level view of the relationship between modeling studies and actual public health practice.\nPlease read the journal club paper and come prepared to discuss your thoughts.\nLeader:\n\nLearning Objectives\n\nUnderstand benefits and limitations of using mathematical modeling studies to guide global health policy\n\nList important ethical considerations of using modeling to inform policy\n\nLearn how modelers can ensure studies are conducted and reported in a rigorous & transparent manner\n\nBecome familiar with examples of mathematical modeling applied to global health policy\n\n\n\nGuiding Questions\n\nModeling-informed recommendations were more likely to be conditional (versus strong), and to be based on evidence that was assessed as lower quality. Why might this be?\n\nHow does reporting model limitations and assumptions affect trust in model validity?\n\nHow does the use of mathematical modeling differ for infectious disease vs other disease guidelines?"
  },
  {
    "objectID": "resources/articles.html",
    "href": "resources/articles.html",
    "title": "EMOD Papers",
    "section": "",
    "text": "Official EMOD Documentation\nIDM Documentation\n\n\nSoftware Design of EMOD\n(2018) Implementation and applications of EMOD, an individual-based multi-disease modeling platform\n(2018) Agent-based models of malaria transmission: a systematic review\n\n\nMosquito Model\n(2011) A malaria transmission-directed model of mosquito life cycle and ecology\n\n\nWithin-Host Model\n(2012) P. falciparum Infection Durations and Infectiousness Are Shaped by Antigenic Variation and Innate and Adaptive Host Immunity in a Mathematical Model\n(2012) Malaria parasite diversity and transmission intensity affect development of parasitological immunity in a mathematical model\n(2021) Mechanistic within-host models of the asexual Plasmodium falciparum infection: a review and analytical assessment\n\n\nWithin-Host Calibration and Transmission\n(2015) Calibration of an intrahost malaria model and parameter ensemble evaluation of a pre-erythrocytic vaccine\n(2015) Characterization of the infectious reservoir of malaria with an agent-based model calibrated to age-stratified parasite densities and infectiousness\n(2018) Seasonality and heterogeneity of malaria transmission determine success of interventions in high-endemic settings: a modeling study\n(2018) Modeling the impact of Plasmodium falciparum sexual stage immunity on the composition and dynamics of the human infectious reservoir for malaria in natural settings\n\n\nInterventions\n\nGeneric Interventions\n(2013) Mathematical Models of Within-Host and Transmission Dynamics to Determine Effects of Malaria Interventions in a Variety of Transmission Settings\n\n\nDrug-Based Interventions\n(2015) Mass campaigns with antimalarial drugs: a modelling comparison of artemether-lumefantrine and DHA-piperaquine with and without primaquine as tools for malaria control and elimination\n(2017) Role of mass drug administration in elimination of Plasmodium falciparum malaria: a consensus modelling study\n(2018) Impact of mass drug administration campaigns depends on interaction with seasonal human movement\n(2019) Reducing malaria burden and accelerating elimination with long-lasting systemic insecticides: a modelling study of three potential use cases\n(2023) Perennial malaria chemoprevention with and without malaria vaccination to reduce malaria burden in young children: a modelling analysis\n\n\nVaccines\n(2013) A mathematical model of the impact of present and future malaria vaccines\n(2016) Public health impact and cost-effectiveness of the RTS,S/AS01 malaria vaccine: a systematic comparison of predictions from four mathematical models\n(2023) Perennial malaria chemoprevention with and without malaria vaccination to reduce malaria burden in young children: a modelling analysis\n\n\nGene Drives\n(2016) Impact of mosquito gene drive on malaria elimination in a computational model with explicit spatial and temporal dynamics\n(2020) Modeling impact and cost-effectiveness of driving-Y gene drives for malaria elimination in the Democratic Republic of the Congo\n(2021) Vector genetics, insecticide resistance and gene drives: An agent-based modeling approach to evaluate malaria transmission and elimination\n(2022) Population replacement gene drive characteristics for malaria elimination in a range of seasonal transmission settings: a modelling study\n(2022) Gene drive mosquitoes can aid malaria elimination by retarding Plasmodium sporogonic development\n\n\n\nIntervention Combinations\n(2016) Optimal Population-Level Infection Detection Strategies for Malaria Control and Elimination in a Spatial Model of Malaria Transmission\n(2016) Malaria Elimination Campaigns in the Lake Kariba Region of Zambia: A Spatial Dynamical Model\n(2017) Effectiveness of reactive case detection for malaria elimination in three archetypical transmission settings: a modelling study\n(2019) Effective strategies for preventing reestablishment of malaria in areas with recent elimination and high transmission potential\n(2023) An archetypes approach to malaria intervention impact mapping: a new framework and example application\n(2023) Application of mathematical modelling to inform national malaria intervention planning in Nigeria",
    "crumbs": [
      "Additional Resources",
      "EMOD Papers"
    ]
  },
  {
    "objectID": "about/mission.html",
    "href": "about/mission.html",
    "title": "Mission",
    "section": "",
    "text": "Malaria burden remains high in Sub-Saharan Africa despite two decades of intense intervention. Regular analysis and use of public health data will lead to more effective control through evidence-based decision making.\nOur long-term goal is to train a critical mass of modeling scientists who are:\n\n\n\n\n\n\n1. Retained within Sub-Saharan Africa\n\n\n\n\n\n\n\n\n\n\n\n\n2. Training the next generation of modelers\n\n\n\n\n\n\n\n\n\n\n\n\n3. Working closely with local malaria control programs to provide operational support\n\n\n\n\n\n\n\n\n\n\n\n\n4. Competitive in obtaining grants from international funding agencies\n\n\n\n\n\n\n\n\n\n\n\n\n5. Closely networked with each other across Africa and with international partners\n\n\n\n\n\n\nTo help achieve this goal, Northwestern University’s malaria modeling team is offering an 18-week intensive in-person training program in applied malaria modeling for Sub-Saharan African mathematical modeling faculty - with or without public health backgrounds - tailored to their experience and needs.\nTraining is focused on applied modeling with EMOD, an open-source malaria transmission modeling software that is currently used to support malaria programs. Participants will design their own research question and focal training project using EMOD that will form the basis of a Specific Aims page (grant proposal summary page) to be developed during the program."
  },
  {
    "objectID": "about/highlights.html",
    "href": "about/highlights.html",
    "title": "Program Highlights",
    "section": "",
    "text": "1. Multi-modal training in applied malaria modeling\n\n\n\nHands-on tutorials and exercises focused on model configuration and analysis, supplemented by lectures and journal clubs, to enable participants to independently carry out their focal projects. Participants will run models on Northwestern’s high performance computing cluster.\n\n\n\n\n\n\n\n\n2. Training in written and oral scientific communication\n\n\n\nIterative revisions of written Specific Aims and oral presentations, with feedback from program director, peers, and other Northwestern modelers.\n\n\n\n\n\n\n\n\n3. Dedicated mentorship\n\n\n\nWeekly 1-on-1 meetings with program director and an assigned partner from Northwestern’s team of modelers.\n\n\n\n\n\n\n\n\n4. Building connections with a global community of malaria modelers\n\n\n\nMembership and participation in the Applied Malaria Modeling Network (AMMnet); connections with faculty enrichment program alumni; attendance at the American Society of Tropical Medicine & Hygiene (ASTMH) 2023 Annual Meeting in Chicago"
  },
  {
    "objectID": "expectations/expectations_aims_page.html",
    "href": "expectations/expectations_aims_page.html",
    "title": "Aims Page Expectations",
    "section": "",
    "text": "Back to Program Handbook\n\nIdeas List\n\nA list of at least 3 topics or research ideas for your EMOD project in applied malaria modeling\n\nWho will review: Buddies\n\n\n\nOutline Draft 1\n\nDraft 2-3 specific aims for two of your applied malaria modeling ideas, along with the appropriate context and motivation as bullet points\n\nWho will review: Buddies\n\n\n\nOutline Draft 2\n\nPick one of your applied malaria modeling ideas\nComplete the “structure of an aims page” outline for this idea, filling in each element. For elements where you are not sure how to complete, review with one of the instructional staff\n\nWho will review: Buddies\n\n\n\nFull Draft 1\n\nUsing your “structure of an aims page” outline, write the entire first draft of the Aims page, including all sections.\n\nWho will review: Jaline\n\n\n\nFull Drafts 2-4\n\nEach new draft should be incorporate the feedback you received on the previous draft and anything new you have learned from the program, from literature review, or from executing the project. If you have chosen to reject a piece of feedback, provide a reason. If you need to change topics entirely, do so by returning to the Outline Draft 2 step and moving forward from there with the new research question.\n\nWho will review: Jaline\n\n\n\nFinal Draft\n\nThis should be a very polished Specific Aims page on your applied malaria project that you would be proud to submit to a funding agency."
  },
  {
    "objectID": "guides.html",
    "href": "guides.html",
    "title": "How-To Guides",
    "section": "",
    "text": "📁 Choose A Category\n\n\n\n\n\n\n\n\n\n\n\nInstallation Guide\n\n\n\n\n\n\n\n\n\n\n\n\n\nSimulation Guides\n\n\n\n\n\n\n\n\n\n\n\n\n\nDemographics Guides\n\n\n\n\n\n\n\n\n\n\n\n\n\nClimate Guides\n\n\n\n\n\n\n\n\n\n\n\n\n\nVector Guides\n\n\n\n\n\n\n\n\n\n\n\n\n\nIntervention Guides\n\n\n\n\n\n\n\n\n\n\n\n\n\nDiagnostic Guides\n\n\n\n\n\n\n\n\n\n\n\n\n\nReport Guides\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnalyzer Guides\n\n\n\n\n\n\n\n\n\n\n\n\n\nIndividual Properties Guides\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "guides/demographics_guide.html",
    "href": "guides/demographics_guide.html",
    "title": "Demographics Guides",
    "section": "",
    "text": "Simulated settings and human populations.\n\n\n\n\n\n\n\n\n\n\n\nCreating Demographics Files\n\n\n\n\n\n\n\n\n\n\n\n\n\nMulti-Node Demographics\n\n\n\n\n\n\n\n\n\n\nNo matching items",
    "crumbs": [
      "EMOD How-To Guides",
      "Demographics Guides"
    ]
  },
  {
    "objectID": "guides/properties_guide_pages/intervention_properties.html",
    "href": "guides/properties_guide_pages/intervention_properties.html",
    "title": "Using Individual Properties in Interventions",
    "section": "",
    "text": "Most interventions can be targeted to individuals holding specific IP values, typically with the ind_property_restrictions function argument and setting the desired Individual Property restrictions. This example creates an SMC drug campaign that is limited to individuals in the ‘Treatment’ study cohort group as defined in the demographics file.\n\nimport emod_api.campaign as campaign\nimport emodpy_malaria.interventions.drug_campaign as drug_campaign\n\ndrug_campaign.add_drug_campaign(campaign, \n                                campaign_type=\"SMC\", \n                                start_days=[165], \n                                drug_code=\"SPA\",\n                                repetitions=4, \n                                tsteps_btwn_repetitions=30, \n                                coverage=0.7,\n                                ind_property_restrictions=[{'StudyCohort': 'Treatment'}],\n                                target_group={'agemin': 0.25, 'agemax': 5},\n                                receiving_drugs_event_name=\"Received_SMC\")"
  },
  {
    "objectID": "guides/simulation_guide.html",
    "href": "guides/simulation_guide.html",
    "title": "Simulation Guides",
    "section": "",
    "text": "Building blocks of EMOD simulations\n\n\n\n\n\n\n\n\n\n\n\nExperiment Workflow\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdding Malaria Transmission\n\n\n\n\n\n\n\n\n\n\n\n\n\nUpdating the Config File\n\n\n\n\n\n\n\n\n\n\nNo matching items",
    "crumbs": [
      "EMOD How-To Guides",
      "Simulation Guides"
    ]
  },
  {
    "objectID": "guides/install_guide.html",
    "href": "guides/install_guide.html",
    "title": "Installation Guide",
    "section": "",
    "text": "Below are instructions on how to install emodpy from the terminal, particularly for use on QUEST, or other linux-based clusters. The following instructions are specific to QUEST but can easily be adapted to other clusters or HPCs that use SLURM scheduling.\n\n\n\nReview prerequisites and recommendations.\n\nhttps://docs.idmod.org/projects/idmtools/en/latest/platforms/slurm/index.html#prerequisites\nhttps://docs.idmod.org/projects/idmtools/en/latest/platforms/slurm/index.html#recommendations\n\nLogin/SSH to Slurm cluster (QUEST). You can either use FastX or directly SSH from terminal prompt, like the following:\nssh –X &lt;usernamehere&gt;@quest.northwestern.edu \nLoad Python module 3.8.4, at terminal prompt, type the following:\n\nNOTE: idmtools requires Python 3.7 or higher\n\nmodule load python/3.8.4\nPull Singularity image containing Python and MPI (used by emodpy-malaria tasks)\n\nNOTE: this sif file already exists in /projects/b1139/images/dtk_run_rocky_py39.sif and does not need to be reinstalled if you have access to the project\n\ncurl https://packages.idmod.org:443/artifactory/idm-docker-public/idmtools/rocky_mpi/dtk_run_rocky_py39.sif -o dtk_run_rocky_py39.sif\n\n\n\n\nIf not already existing, be sure to create an “environments” folder in your home directory to save all of your personal virtual environments in: mkdir environments. Once created, navigate to this folder and run the following commands to complete the installation: cd environments.\n\nCreate a Python virtual environment, unload Python module, and activate virtual environment, which is named “myvenv” in the following:\n\nNOTE: you may name the environment anything you like, “myvenv” is just an example\n\npython -m venv &lt;myvenv&gt; \nsource &lt;path_to_myvenv&gt;/bin/activate \n\nNOTE: The following step is only needed when a new idmtools Singularity image is available and you’ve previously installed packages in your home directory. This cleans up local packages from previous installations inside Singularity container\n\nrm –fr ~/.local/lib/python* \nInstall emodpy-malaria and idmtools_platform_slurm\npip install emodpy-malaria --ignore-installed --index-url=https://packages.idmod.org/api/pypi/pypi-production/simple \n\npip install idmtools_platform_slurm --ignore-installed --index-url=https://packages.idmod.org/api/pypi/pypi-production/simple\nDuring installation of the shared venv on b1139, some issues arose that cause the installation to quit unexpectedly. This is seemingly an issue with access to the libgit2 module to build the pygit wheel. Libgit2 was installed within the emodpy_alt venv folder on b1139 using these instructions. As it is now available, installation should hopefully avoid these issues in the future but it could occur with personal venvs.\n\nNOTE: The above installation instructions are for emodpy-malaria, which includes installing idmtools and other dependencies by referencing the requirements.txt when using pip install. For more information on requirements.txt and pip install, see https://packaging.python.org/en/latest/guides/installing-using-pip-and-virtual-environments/#using-requirements-files\n\nIf needed, install other python packages",
    "crumbs": [
      "EMOD How-To Guides",
      "Installation Guide"
    ]
  },
  {
    "objectID": "guides/install_guide.html#installation-methods",
    "href": "guides/install_guide.html#installation-methods",
    "title": "Installation Guide",
    "section": "",
    "text": "Below are instructions on how to install emodpy from the terminal, particularly for use on QUEST, or other linux-based clusters. The following instructions are specific to QUEST but can easily be adapted to other clusters or HPCs that use SLURM scheduling.\n\n\n\nReview prerequisites and recommendations.\n\nhttps://docs.idmod.org/projects/idmtools/en/latest/platforms/slurm/index.html#prerequisites\nhttps://docs.idmod.org/projects/idmtools/en/latest/platforms/slurm/index.html#recommendations\n\nLogin/SSH to Slurm cluster (QUEST). You can either use FastX or directly SSH from terminal prompt, like the following:\nssh –X &lt;usernamehere&gt;@quest.northwestern.edu \nLoad Python module 3.8.4, at terminal prompt, type the following:\n\nNOTE: idmtools requires Python 3.7 or higher\n\nmodule load python/3.8.4\nPull Singularity image containing Python and MPI (used by emodpy-malaria tasks)\n\nNOTE: this sif file already exists in /projects/b1139/images/dtk_run_rocky_py39.sif and does not need to be reinstalled if you have access to the project\n\ncurl https://packages.idmod.org:443/artifactory/idm-docker-public/idmtools/rocky_mpi/dtk_run_rocky_py39.sif -o dtk_run_rocky_py39.sif\n\n\n\n\nIf not already existing, be sure to create an “environments” folder in your home directory to save all of your personal virtual environments in: mkdir environments. Once created, navigate to this folder and run the following commands to complete the installation: cd environments.\n\nCreate a Python virtual environment, unload Python module, and activate virtual environment, which is named “myvenv” in the following:\n\nNOTE: you may name the environment anything you like, “myvenv” is just an example\n\npython -m venv &lt;myvenv&gt; \nsource &lt;path_to_myvenv&gt;/bin/activate \n\nNOTE: The following step is only needed when a new idmtools Singularity image is available and you’ve previously installed packages in your home directory. This cleans up local packages from previous installations inside Singularity container\n\nrm –fr ~/.local/lib/python* \nInstall emodpy-malaria and idmtools_platform_slurm\npip install emodpy-malaria --ignore-installed --index-url=https://packages.idmod.org/api/pypi/pypi-production/simple \n\npip install idmtools_platform_slurm --ignore-installed --index-url=https://packages.idmod.org/api/pypi/pypi-production/simple\nDuring installation of the shared venv on b1139, some issues arose that cause the installation to quit unexpectedly. This is seemingly an issue with access to the libgit2 module to build the pygit wheel. Libgit2 was installed within the emodpy_alt venv folder on b1139 using these instructions. As it is now available, installation should hopefully avoid these issues in the future but it could occur with personal venvs.\n\nNOTE: The above installation instructions are for emodpy-malaria, which includes installing idmtools and other dependencies by referencing the requirements.txt when using pip install. For more information on requirements.txt and pip install, see https://packaging.python.org/en/latest/guides/installing-using-pip-and-virtual-environments/#using-requirements-files\n\nIf needed, install other python packages",
    "crumbs": [
      "EMOD How-To Guides",
      "Installation Guide"
    ]
  },
  {
    "objectID": "guides/climate_guide_pages/edit_climate_files.html",
    "href": "guides/climate_guide_pages/edit_climate_files.html",
    "title": "Customize Climate",
    "section": "",
    "text": "Edit weather files to control simulated climate"
  },
  {
    "objectID": "guides/analyzer_guide_pages/spatial_analyzer.html",
    "href": "guides/analyzer_guide_pages/spatial_analyzer.html",
    "title": "Multi-Node Analysis",
    "section": "",
    "text": "Analyze SpatialReport or SpatialReportMalariaFiltered"
  },
  {
    "objectID": "guides/properties_guide.html",
    "href": "guides/properties_guide.html",
    "title": "Individual Properties Guides",
    "section": "",
    "text": "Using Individual Properties in Reports\n\n\n\n\n\n\n\n\n\n\n\n\n\nUsing Individual Properties in Interventions\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdding Individual Properties to Demographics\n\n\n\n\n\n\n\n\n\n\nNo matching items",
    "crumbs": [
      "EMOD How-To Guides",
      "Individual Properties Guides"
    ]
  },
  {
    "objectID": "guides/demographics_guide_pages/demographics_files.html",
    "href": "guides/demographics_guide_pages/demographics_files.html",
    "title": "Creating Demographics Files",
    "section": "",
    "text": "The demographics file is a required input file for EMOD that specifies characteristics of the population in a simulation. This includes aspects like the population size, birth rates, non-malaria mortality rates, age structure, initial prevalence, and more. Full documentation on the demographics file and its parameters/structure are available in the malaria model documentation.\n\n\nA demographics file is a JSON file organized into 4 main sections:\n\nMetadata\nNodeProperties\nDefaults\n\nParameters applied to all nodes in the simulation\n\nNodes: each node is a simulated location. Transmission within a node is well-mixed, and nodes are connected by human and/or vector migration.\n\nAllows node-specific parameters\nSpecified parameters override values in ‘Defaults’\n\n\n# Structure of Demographics File for a simulation with 1 node\n  {\n     \"Metadata\": {\n          \"DateCreated\": \"dateTime\",\n          \"Tool\": \"scriptUsedToGenerate\",\n          \"Author\": \"author\",\n          \"IdReference\": \"Gridded world grump2.5arcmin\",\n          \"NodeCount\": \"1\"\n     },\n     \"NodeProperties\": [\n          {...}\n     ],\n     \"Defaults\": {\n          \"NodeAttributes\": {\n            ...\n            \"BirthRateSource\": \"World Bank\",\n            \"CountryBirthRate\": 31.047,\n            \"World Bank Year\": \"2016\",\n            ...\n          },\n          \"IndividualAttributes\": {...},\n          \"IndividualProperties\": {...}\n     },\n     \"Nodes\": [{\n          \"NodeID\": 1,\n          \"NodeAttributes\": {\n            \"BirthRate\": 0.1190,\n            \"InitialPopulation\": 1400,\n            \"Village\": \"Obom\"\n          },\n          \"IndividualAttributes\": {...},\n          \"IndividualProperties\": {...}\n     }]\n  }\n\n\n\nThe emod-api package contains most of the major functionality to create a demographics file. It is supported by emodpy-malaria to add parameters that are more specific to the malaria workflow, imported as Demographics in the code chunk below. For single node, non-spatial simulations the from_template_node command is most commonly used; however, you may also choose to read in pre-made json files for these types of simulations. We include this command in our demographics builder with it’s basic parameters: - latitude - longitude - population size - site name - forced node ID (if desired) - initial prevalence value (if desired)\nWith this saved as the demog item, we can add additional complexity as needed. This may include things like setting equilibrium vital dynamics so birth and mortality rates are equal, producing a relatively stable population size, or an age distribution for our population. In this example, we pull the age distribution of all of Sub-Saharan Africa from the emod-api and then apply it to our demographics item. You may also add complexity through individual properties and other specific parameters as desired.\n\nimport emodpy_malaria.demographics.MalariaDemographics as Demographics\nimport emod_api.demographics.PreDefinedDistributions as Distributions\n\ndef build_demog():\n    \"\"\"\n    This function builds a demographics input file for the DTK using emod_api.\n    \"\"\"\n\n    demog = Demographics.from_template_node(lat=1.00, lon=1.00, pop=1000, name=\"Example_Site_Name\", forced_id=1, init_prev=0.1)\n    \n    # Add equal birth and mortality rates\n    demog.SetEquilibriumVitalDynamics()\n    \n    # Call and add age distribution\n    age_distribution = Distributions.AgeDistribution_SSAfrica\n    demog.SetAgeDistribution(age_distribution)\n\n    return demog\n\n\n\n\nThe example above is based on the assumption that you set the population dynamic, controlled by Birth_Rate_Dependence to POPULATION_DEP_RATE (the default). However, in the situation where you want to use FIXED_BIRTH_RATE, then setting as above will cause the birth to be near zero, because birth rate in the POPULATION_DEP_RATE is read as probability of birth per person in the model per day. In the FIXED_BIRTH_RATE setting, birth rate is read as probability of birth per day.\nAs a result, it is recommended that you choose a crude birth rate that works for you (birth per 1000 population per year), and create your demographic this way:\n\nimport emodpy_malaria.demographics.MalariaDemographics as Demographics\nfrom emod_api.demographics.DemographicsTemplates import CrudeRate\n\ndef build_demog():\n    \"\"\"\n    This function builds a demographics input file for the DTK using emod_api.\n    \"\"\"\n    \n    pop = 1000\n    crude_rate = 38.92\n\n    demog = Demographics.from_template_node(lat=1.00, lon=1.00, pop=pop, name=\"Example_Site_Name\", forced_id=1, init_prev=0.1)\n\n    # Set Birth and Death Rate    \n    demog.SetBirthRate(CrudeRate(crude_rate*pop))\n    demog.SetMortalityRate(CrudeRate(crude_rate))\n    \n    # Set age distribution to equilibrium\n    demog.SetEquilibriumAgeDistFromBirthAndMortRates(CrudeRate(crude_rate),\n                                                     CrudeRate(crude_rate))\n\n    return demog\n\nBasically, the birth rate needs to be set differently to account for the difference between using FIXED_BIRTH_RATE and POPULATION_DEP_RATE. Note that in this example, the mortality rate is also set to the birth rate to ensure that the population is stable and at equilibrium. Finally, we use the SetEquilibriumAgeDistFromBirthAndMortRates to make sure the age distribution is already at equilibrium given the birth and death rates right from the beginning. You might notice that this means the age distribution in the model is not the same as the “real world”. The actual age distribution in the model can only be achieved if you supply the birth and death (by age) rates over the years of simulations. With constant birth rate and equilibrium vital dynamics, the age distribution will move into a fixed shape even if you start off with a different age distribution."
  },
  {
    "objectID": "guides/demographics_guide_pages/demographics_files.html#parts-of-a-demographics-file",
    "href": "guides/demographics_guide_pages/demographics_files.html#parts-of-a-demographics-file",
    "title": "Creating Demographics Files",
    "section": "",
    "text": "A demographics file is a JSON file organized into 4 main sections:\n\nMetadata\nNodeProperties\nDefaults\n\nParameters applied to all nodes in the simulation\n\nNodes: each node is a simulated location. Transmission within a node is well-mixed, and nodes are connected by human and/or vector migration.\n\nAllows node-specific parameters\nSpecified parameters override values in ‘Defaults’\n\n\n# Structure of Demographics File for a simulation with 1 node\n  {\n     \"Metadata\": {\n          \"DateCreated\": \"dateTime\",\n          \"Tool\": \"scriptUsedToGenerate\",\n          \"Author\": \"author\",\n          \"IdReference\": \"Gridded world grump2.5arcmin\",\n          \"NodeCount\": \"1\"\n     },\n     \"NodeProperties\": [\n          {...}\n     ],\n     \"Defaults\": {\n          \"NodeAttributes\": {\n            ...\n            \"BirthRateSource\": \"World Bank\",\n            \"CountryBirthRate\": 31.047,\n            \"World Bank Year\": \"2016\",\n            ...\n          },\n          \"IndividualAttributes\": {...},\n          \"IndividualProperties\": {...}\n     },\n     \"Nodes\": [{\n          \"NodeID\": 1,\n          \"NodeAttributes\": {\n            \"BirthRate\": 0.1190,\n            \"InitialPopulation\": 1400,\n            \"Village\": \"Obom\"\n          },\n          \"IndividualAttributes\": {...},\n          \"IndividualProperties\": {...}\n     }]\n  }"
  },
  {
    "objectID": "guides/demographics_guide_pages/demographics_files.html#single-node-simulations",
    "href": "guides/demographics_guide_pages/demographics_files.html#single-node-simulations",
    "title": "Creating Demographics Files",
    "section": "",
    "text": "The emod-api package contains most of the major functionality to create a demographics file. It is supported by emodpy-malaria to add parameters that are more specific to the malaria workflow, imported as Demographics in the code chunk below. For single node, non-spatial simulations the from_template_node command is most commonly used; however, you may also choose to read in pre-made json files for these types of simulations. We include this command in our demographics builder with it’s basic parameters: - latitude - longitude - population size - site name - forced node ID (if desired) - initial prevalence value (if desired)\nWith this saved as the demog item, we can add additional complexity as needed. This may include things like setting equilibrium vital dynamics so birth and mortality rates are equal, producing a relatively stable population size, or an age distribution for our population. In this example, we pull the age distribution of all of Sub-Saharan Africa from the emod-api and then apply it to our demographics item. You may also add complexity through individual properties and other specific parameters as desired.\n\nimport emodpy_malaria.demographics.MalariaDemographics as Demographics\nimport emod_api.demographics.PreDefinedDistributions as Distributions\n\ndef build_demog():\n    \"\"\"\n    This function builds a demographics input file for the DTK using emod_api.\n    \"\"\"\n\n    demog = Demographics.from_template_node(lat=1.00, lon=1.00, pop=1000, name=\"Example_Site_Name\", forced_id=1, init_prev=0.1)\n    \n    # Add equal birth and mortality rates\n    demog.SetEquilibriumVitalDynamics()\n    \n    # Call and add age distribution\n    age_distribution = Distributions.AgeDistribution_SSAfrica\n    demog.SetAgeDistribution(age_distribution)\n\n    return demog"
  },
  {
    "objectID": "guides/demographics_guide_pages/demographics_files.html#fixed-birth-rate-and-age-equilibrium",
    "href": "guides/demographics_guide_pages/demographics_files.html#fixed-birth-rate-and-age-equilibrium",
    "title": "Creating Demographics Files",
    "section": "",
    "text": "The example above is based on the assumption that you set the population dynamic, controlled by Birth_Rate_Dependence to POPULATION_DEP_RATE (the default). However, in the situation where you want to use FIXED_BIRTH_RATE, then setting as above will cause the birth to be near zero, because birth rate in the POPULATION_DEP_RATE is read as probability of birth per person in the model per day. In the FIXED_BIRTH_RATE setting, birth rate is read as probability of birth per day.\nAs a result, it is recommended that you choose a crude birth rate that works for you (birth per 1000 population per year), and create your demographic this way:\n\nimport emodpy_malaria.demographics.MalariaDemographics as Demographics\nfrom emod_api.demographics.DemographicsTemplates import CrudeRate\n\ndef build_demog():\n    \"\"\"\n    This function builds a demographics input file for the DTK using emod_api.\n    \"\"\"\n    \n    pop = 1000\n    crude_rate = 38.92\n\n    demog = Demographics.from_template_node(lat=1.00, lon=1.00, pop=pop, name=\"Example_Site_Name\", forced_id=1, init_prev=0.1)\n\n    # Set Birth and Death Rate    \n    demog.SetBirthRate(CrudeRate(crude_rate*pop))\n    demog.SetMortalityRate(CrudeRate(crude_rate))\n    \n    # Set age distribution to equilibrium\n    demog.SetEquilibriumAgeDistFromBirthAndMortRates(CrudeRate(crude_rate),\n                                                     CrudeRate(crude_rate))\n\n    return demog\n\nBasically, the birth rate needs to be set differently to account for the difference between using FIXED_BIRTH_RATE and POPULATION_DEP_RATE. Note that in this example, the mortality rate is also set to the birth rate to ensure that the population is stable and at equilibrium. Finally, we use the SetEquilibriumAgeDistFromBirthAndMortRates to make sure the age distribution is already at equilibrium given the birth and death rates right from the beginning. You might notice that this means the age distribution in the model is not the same as the “real world”. The actual age distribution in the model can only be achieved if you supply the birth and death (by age) rates over the years of simulations. With constant birth rate and equilibrium vital dynamics, the age distribution will move into a fixed shape even if you start off with a different age distribution."
  },
  {
    "objectID": "guides/report_guide_pages/spatial_reports.html",
    "href": "guides/report_guide_pages/spatial_reports.html",
    "title": "Spatial Reports",
    "section": "",
    "text": "Reports for multi-node simulations"
  },
  {
    "objectID": "guides/report_guide_pages/spatial_reports.html#human-migration",
    "href": "guides/report_guide_pages/spatial_reports.html#human-migration",
    "title": "Spatial Reports",
    "section": "Human Migration",
    "text": "Human Migration"
  },
  {
    "objectID": "guides/report_guide_pages/spatial_reports.html#vector-migration",
    "href": "guides/report_guide_pages/spatial_reports.html#vector-migration",
    "title": "Spatial Reports",
    "section": "Vector Migration",
    "text": "Vector Migration"
  },
  {
    "objectID": "guides/report_guide_pages/event_reports.html",
    "href": "guides/report_guide_pages/event_reports.html",
    "title": "Event Reports",
    "section": "",
    "text": "⚠️ How-To: report on broadcast events that occur during simulations\nEMOD is capable of tracking a variety of built-in events as well as custom campaign events. Custom events can be particularly useful for explicitly tracking and counting the number of interventions distributed. For example, in the simple SMC intervention (see add drug campaigns how to) we defined an event called 'Received_SMC' to describe children who actually received SMC drugs in the simulation. The add_treatment_seeking function automatically generates a 'Received_Treatment' event for each individual receiving treatment for symptomatic malaria. Adding custom events to the config parameter 'Custom_Individual_Events' is automatically handled by emodpy during campaign creation.\n\nAggregate Events - ReportEventCounter\nTo track how many events are occurring each day, request ReportEventCounter with add_report_event_counter() and specify the list of events you would like to track, in this case receiving either of the two above drug-based interventions:\n\nfrom emodpy_malaria.reporters.builtin import *\n\nsim_years = 5\nadd_report_event_counter(task, manifest, start_day=365, end_day=sim_years*365,\n                             event_trigger_list=['Received_SMC', 'Received_Treatment'],\n                             filename_suffix=\"drug_interventions\")\n\nThis generates a ReportEventCounter.json file that reports that total number of the specified events in each day of the simulation. Reporting a subset of node IDs (node_ids), restricting on age (min_age_years, max_age_years), and restricting on individual property (must_have_ip_key_value) are all configurable. The format of the .json is identical to InsetChart.json, so analyzers written for InsetChart.json can be easily adapted for ReportEventCounter.\n\n\nIndividual Events - ReportEventRecorder\nSometimes you may want to track individual-level events. To do so, we use add_event_recorder() to call the ReportEventRecorder, which is similar to ReportEventCounter but lists each event as it occurs and provides information about the person experiencing the event. The calls for these two reports are quite similar but the recorder uses event_list rather than event_trigger_list and has no filename_suffix:\n\nfrom emodpy_malaria.reporters.builtin import *\n\nsim_years = 5\nadd_event_recorder(task, start_day=365, end_day=sim_years*365,\n                       event_list=['Received_SMC', 'Received_Treatment'],\n                       node_ids=[1], min_age_years=0,\n                       max_age_years=100)\n\nNote: If you want to return all events from the simulation, leave the “events” array empty and set only_include_events_in_list to False.\nAfter running, a file called ReportEventRecorder.csv will be generated in the output/ folder for the simulation. Each row of the report represents a distinct event, with the following information in its columns:\nEvent Details: - Time (when did event occur) - Node_ID (where did event occur) - Event_Name (what happened)\nIndividual Details (who did it happen to?): - Individual_ID - Age - Gender - Infected (1 = True) - Infectiousness - RelativeBitingRate - TrueParasiteDensity - TrueGametocyteDensity - HasClinicalSymptoms\nPlus an additional column for the value of any IPs requested through ips_to_record.\nYou can include additional customization following the documentation"
  },
  {
    "objectID": "guides/vector_guide_pages/vector_abundance.html",
    "href": "guides/vector_guide_pages/vector_abundance.html",
    "title": "Change Vector Abundance",
    "section": "",
    "text": "After adding vectors to your model, you may want to alter their abundance in order to reach a desired entomological inoculation rate (EIR), malaria prevalence, or malaria incidence. In EMOD this is often done by re-scaling the amount of habitat available for larval development: Available habitat is directly related to mosquito abundance, and mosquito abundance in turn is directly related to biting rate.\nThere are several options for configuring habitat. You can first set habitat parameters and modify them directly as detailed in the section Set up mosquito species.\nAfter those initial parameters are set, habitat can be modified with scaling parameters.\n\nUniversal scaling\nTo apply a constant scale factor to all habitats equally for all species, use the x_Temporary_Larval_Habitat configuration parameter.\nThis parameter will scale all habitat parameters for the entire simulation duration without changing the temporal dynamics, so that a new transmission is achieved with the same ratios among the species and same time profile. For example, setting x_Temporary_Larval_Habitat to 0.1 would reduce habitat by 90%.\n\n# Ex: Reduce habitat (and thus, adult vectors and biting rate) by 90%.\nconfig.parameters.x_Temporary_Larval_Habitat = 0.1  \n\n\n\nNode-specific scaling in demographics\n\n\nDynamic habitat scaling during simulation\nThe ScaleLarvalHabitat intervention allows the user to scale habitats by type and species at a specified time during the simulation. The emodpy-malaria function add_scale_larval_habitats() takes a dataframe argument to construct the campaign events for habitat scaling:\n\nfrom emodpy_malaria.interventions.scale_larval_habitat import add_scale_larval_habitats\nadd_scale_larval_habitats(campaign, df=habitat_df, start_day=0)\n\nThe habitat_df argument requires column name(s) for each habitat type being scaled, with column values being the scale factor(s). Many configuration options are available, including by species, by node, and by date with additional details in the documentation."
  },
  {
    "objectID": "guides/vector_guide_pages/vector_species.html",
    "href": "guides/vector_guide_pages/vector_species.html",
    "title": "Add Vector Species",
    "section": "",
    "text": "EMOD allows us to specify the distribution of mosquito species in the simulation, and to specify life cycle, larval habitat, and transmission parameters for each species.\n\nSingle Species\nThe example below would populate the model with 100% gambiae mosquitoes and can be included in the config builder with a simple add_species().\n\nimport emodpy_malaria.malaria_config as conf\nconf.add_species(config, manifest, [\"gambiae\"])\n\nDefault parameters will appear in the config file for A. gambiae. Some defaults differ between species and EMOD defaults can be found here.\n\n\nMultiple Species\nWe can also include a mix of vector species, adding multiple vector populations with species-specific parameters.\n\nimport emodpy_malaria.malaria_config as conf\nconf.add_species(config, manifest, species_to_select=[\"gambiae\", \"arabiensis\"])\n\nFor each species listed in Vector_Species_Params, a “VectorPopulation” object will be added to the simulation at each node. Each species will be defined by parameters in the simulation configuration file for the vector ecology and behavior of the species. This allows for a mechanistic description of vector abundances and behavior through the effects of climate and weather on different preferred larval habitats.\n\n\nModify vector species parameters\nTo change vector species parameters from defaults, use the set_species_param() function.\n\nimport emodpy_malaria.malaria_config as conf\n# Example: Decrease the 'Transmission_Rate' of A. arabiensis from 0.9 (default) to 0.75.\nconf.set_species_param(config, \n                     species=\"arabiensis\", \n                     parameter=\"Transmission_Rate\", \n                     value=0.75, \n                     overwrite=False # If True, replaces any previous stored values\n                     )\n\n\n\nModify species habitat parameters\nThe larval habitat parameters for each vector species can also be modified.\n\nimport emodpy_malaria.malaria_config as conf\n# Example: Add brackish swamp habitat availability for A. arabiensis only. \nnew_habitats = {\"arabiensis\": {\"BRACKISH_SWAMP\": 1.7e9, \"Max_Larval_Capacity\": 30000000.0}}\nfor species, habitat in new_habitats.items():\n    conf.set_species_param(config, species,\n                         parameter=\"Larval_Habitat_Types\", \n                         value= habitat, \n                         overwrite=False # Does not delete previous habitat types\n                         )"
  },
  {
    "objectID": "guides/intervention_guide_pages/drug_based_pages/change_drug_adherence.html",
    "href": "guides/intervention_guide_pages/drug_based_pages/change_drug_adherence.html",
    "title": "Change Drug Adherence",
    "section": "",
    "text": "Adherence to drugs can be modified using adherent_drug. This allows you to detail doses (and drugs given), intervals between doses, actual adherence values, and more. More documentation on how to configure adherent drugs is here.\nConfiguring adherence is not required. In the absence of specific configuration, adherence to the full treatment course is assumed to be 100%.\nimport emod_api.campaign as campaign\nimport emodpy_malaria.interventions.drug_campaign as drug_campaign\nimport emodpy_malaria.interventions.adherentdrug as ad\n\nadherent_drug = ad.adherent_drug(campaign=campaign,\n                                     doses=[[\"Sulfadoxine\", \"Pyrimethamine\", 'Amodiaquine'],\n                                            ['Amodiaquine'],\n                                            ['Amodiaquine']],\n                                     dose_interval=1,\n                                     non_adherence_options=['Stop'],\n                                     non_adherence_distribution=[1],\n                                     adherence_values=[\n                                         1,    # for day 1\n                                         0.6,  # day 2\n                                         0.4   # day 3\n                                     ]\n                                     )"
  },
  {
    "objectID": "guides/intervention_guide_pages/drug_based_pages/triggered_interventions.html",
    "href": "guides/intervention_guide_pages/drug_based_pages/triggered_interventions.html",
    "title": "Triggered Campaigns",
    "section": "",
    "text": "Treatment in response to non-symptom simulation event.\n\nReactive or Event-Triggered Interventions\n\nFocal Mass Drug Administration (fMDA)\n\n\nReactive Case Detection (RCD)\n\n\nIntermittent Preventive Treatment in Pregancy (IPTp)"
  },
  {
    "objectID": "guides/intervention_guide_pages/Vaccines.html",
    "href": "guides/intervention_guide_pages/Vaccines.html",
    "title": "Vaccination",
    "section": "",
    "text": "RTS,S and vaccSMC\n\nRTS,S"
  },
  {
    "objectID": "guides/intervention_guide_pages/vector_control_pages/indoor_residual_spraying.html",
    "href": "guides/intervention_guide_pages/vector_control_pages/indoor_residual_spraying.html",
    "title": "IRS",
    "section": "",
    "text": "Indoor Residual Spraying\n\nIRS\nIndoor residual spraying can be distributed with the add_scheduled_irs_housing_modificatoin() function, which has many options to configure the effects of insecticides used.\n\nimport emod_api.campaign as campaign\nfrom emodpy_malaria.interventions.irs import add_scheduled_irs_housing_modification\n\nadd_scheduled_irs_housing_modification(campaign, \n                                       start_day = 1,\n                                       demographic_coverage = 1, \n                                       killing_initial_effect = 1,                    # NOTE: these default effect sizes and kinetics are not calibrated values\n                                       killing_box_duration = 0,\n                                       killing_decay_time_constant = 90,\n                                       repelling_initial_effect = 0,\n                                       repelling_box_duration = 0,\n                                       repelling_decay_time_constant = 90,\n                                       insecticide = \"\",\n                                       intervention_name = \"IRSHousingModification\"\n    \"\"\"\n        Adds scheduled IRSHousingModification intervention to the campaign. The IRSHousingModification intervention class\n        includes Indoor Residual Spraying (IRS) in the simulation. IRS is another key vector control tool in which\n        insecticide is sprayed on the interior walls of a house so that mosquitoes resting on the walls after\n        consuming a blood meal will die. IRS can also have a repellent effect. Because this class is distributed\n        to individuals, it can target subgroups of the population. To target all individuals in a node, use\n        IndoorSpaceSpraying. Do not use IRSHousingModification and IndoorSpaceSpraying together.\n\n    Args:\n        campaign: A campaign builder that also contains schema_path parameters\n        start_day: The day on which the intervention is distributed\n        demographic_coverage: The fraction of individuals in the target demographic that will receive this intervention\n        node_ids: A list of node ids to which this intervention will be distributed. None or [] distributes\n            intervention to all nodes\n        killing_initial_effect: Initial strength of the Killing effect. The effect may decay over time.\n        killing_box_duration: Box duration of effect in days before the decay of Killing Initial_Effect.\n        killing_decay_time_constant: The exponential decay length, in days of the Killing Initial_Effect.\n        repelling_initial_effect: Initial strength of the Killing effect. The effect decays over time.\n        repelling_box_duration: Box duration of effect in days before the decay of Repelling Initial Effect.\n        repelling_decay_time_constant: The exponential decay length, in days of the Repelling Initial Effect.\n        insecticide:The name of the insecticide defined in config.Insecticides for this intervention.\n            If insecticides are being used, then this must be defined as one of those values.  If they are not\n            being used, then this does not needed to be specified or can be empty string.  It cannot have a\n            value if config.Insecticides does not define anything.\n        intervention_name: The optional name used to refer to this intervention as a means to differentiate it from\n            others that use the same class. It’s possible to have multiple IRSHousingModification interventions\n            attached to a person if they have different Intervention_Name values.\n\n    Returns:\n        Nothing\n    \"\"\""
  },
  {
    "objectID": "guides/intervention_guide_pages/vector_control.html",
    "href": "guides/intervention_guide_pages/vector_control.html",
    "title": "Vector Control",
    "section": "",
    "text": "Bednets, IRS, & Larvicides\n\n\n\n\n\n\n\n\n\n\n\nBednets\n\n\n\n\n\n\n\n\n\n\n\n\n\nIRS\n\n\n\n\n\n\n\n\n\n\n\n\n\nLarvicides\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "guides/vector_guide.html",
    "href": "guides/vector_guide.html",
    "title": "Vector Guides",
    "section": "",
    "text": "All about vectors in EMOD. Different species, their habitats, and their abundance.\n\n\n\n\n\n\n\n\n\n\n\nAdd Vector Species\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdd Vector Genetics\n\n\n\n\n\n\n\n\n\n\n\n\n\nChange Vector Abundance\n\n\n\n\n\n\n\n\n\n\nNo matching items",
    "crumbs": [
      "EMOD How-To Guides",
      "Vector Guides"
    ]
  },
  {
    "objectID": "guides/simulation_guide_pages/update_config.html",
    "href": "guides/simulation_guide_pages/update_config.html",
    "title": "Updating the Config File",
    "section": "",
    "text": "The config file contains the core parameters for EMOD. Many of these parameters have been established by the malaria team and can be set using set_team_defaults(); however, you may need to update a variety of configuration parameters for your simulations. These parameters can be explored more in depth in the EMOD config documentation. Broadly, configuration parameters can be used to set up certain things in these categories: drugs and treatments, enable/disable features, general disease, geography and the environment, immunity, incubation, infectivity and transmission, input files, larval habitat, migration, mortality and survival, output settings, parasite dynamics, population dynamics, sampling, scalars and multipliers, simulation setup, symptoms and diagnosis, vector control, and vector life cycle.\nFor parameters that won’t often change you can hard code them directly into the config building function (called set_param_fn() in the how-tos), while it may be beneficial to call others as a global variable, such as sim_years, that can be set and then referenced within the setup function.\nIn this example, we show how to change the Simulation_Duration and Run_Number parameters, but the config.parameters.X structure works for any config parameter. Simulation duration is set in days, and in this example is set to last 5 years (5 yrs * 365 days/yr).\n\nsim_years = 5\n\ndef set_param_fn(config):\n    import emodpy_malaria.malaria_config as conf\n    config = conf.set_team_defaults(config, manifest)\n              \n    #update simulation duration and run number\n    config.parameters.Simulation_Duration = sim_years*365\n    config.parameters.Run_Number = 0\n    return config\n\n\nEnable Births and Deaths\nVital dynamics can be specified in the same way as general config parameters; however, emodpy includes functionality to automatically keep the demographics and config files aligned. For example, if a birth rate is set in the demographics, Enable_Vital_Dynamics and Enable_Birth will automatically be turned on, and vice versa. Birth rates can be specified by Birth_Rate_Dependence to be dependent on a number of factors:\n- “NONE” - “FIXED_BIRTH_RATE” - “POPULATION_DEP_RATE” - “DEMOGRAPHIC_DEP_RATE” - “INDIVIDUAL_PREGNANCIES” - “INDIVIDUAL_PREGNANCIES_BY_AGE_AND_YEAR”\nLikewise, Death_Rate_Dependence determines individuals likelihood of dying from natural, non-disease causes when Enable_Natural_Mortality=1, and can be set to - “NOT_INITIALIZED” - “NONDISEASE_MORTALITY_BY_AGE_AND_GENDER” - “NONDISEASE_MORTALITY_BY_YEAR_AND_AGE_FOR_EACH_GENDER”\nDetailed descriptions of dependencies can be found here.\nIn this example, we have a fixed birth rate (number of infants born each year is independent of modeled population), age- and gender-specific overall mortality rates (defined in demographics file), and no malaria mortality. These parameters should be set in the config builder function. Based on a demographics including equilibrium vital dynamics, Enable_Vital_Dynamics, Enable_Birth, and Enable_Natural_Mortality will already be set to 1 (turned on) and Enable_Disease_Mortality will be set to 0 (turned off), so we only need to set the rate dependencies.\n\ndef set_param_fn(config):\n    import emodpy_malaria.malaria_config as conf\n    config = conf.set_team_defaults(config, manifest)\n              \n    #update birth and death rate dependence\n    config.parameters.Birth_Rate_Dependence = 'FIXED_BIRTH_RATE'\n    config.parameters.Death_Rate_Dependence = 'NONDISEASE_MORTALITY_BY_AGE_AND_GENDER'\n    return config"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Faculty Enrichment Program in Applied Malaria Modeling",
    "section": "",
    "text": "Mission\nMalaria burden remains high in Sub-Saharan Africa despite two decades of intense intervention. Regular analysis and use of public health data will lead to more effective control through evidence-based decision making.\nOur long-term goal is to train a critical mass of modeling scientists who are:\n\n\n\n\n\n\n1. Retained within Sub-Saharan Africa\n\n\n\n\n\n\n\n\n\n\n\n\n2. Training the next generation of modelers\n\n\n\n\n\n\n\n\n\n\n\n\n3. Working closely with local malaria control programs to provide operational support\n\n\n\n\n\n\n\n\n\n\n\n\n4. Competitive in obtaining grants from international funding agencies\n\n\n\n\n\n\n\n\n\n\n\n\n5. Closely networked with each other across Africa and with international partners\n\n\n\n\n\n\nTo help achieve this goal, Northwestern University’s malaria modeling team is offering an 18-week intensive in-person training program in applied malaria modeling for Sub-Saharan African mathematical modeling faculty - with or without public health backgrounds - tailored to their experience and needs.\nTraining is focused on applied modeling with EMOD, an open-source malaria transmission modeling software that is currently used to support malaria programs. Participants will design their own research question and focal training project using EMOD that will form the basis of a Specific Aims page (grant proposal summary page) to be developed during the program.\n\n\nProgram Highlights\n\n\n\n\n\n\nMulti-modal training in applied malaria modeling\n\n\n\nHands-on tutorials and exercises focused on model configuration and analysis, supplemented by lectures and journal clubs, to enable participants to independently carry out their focal projects. Participants will run models using Northwestern’s high performance computing cluster.\n\n\n\n\n\n\n\n\nTraining in written and oral scientific communication\n\n\n\nIterative revisions of draft documents and oral presentations, with feedback from program director, peers, and other Northwestern modelers.\n\nProject Specific Aims page\nNIH-Style Investigator “Biosketch”\n3 Research Talks (Project Proposal, Work-in-Progress, and Final Presentation)\n\n\n\n\n\n\n\n\n\nDedicated mentorship\n\n\n\nWeekly 1-on-1 meetings with program director and an assigned partner from Northwestern’s team of modelers.\n\n\n\n\n\n\n\n\nBuilding connections with a global community of malaria modelers\n\n\n\n\nJoin and participation in the Applied Malaria Modeling Network (AMMnet)\n\nConnect with faculty enrichment program alumni\nAttend the American Society of Tropical Medicine & Hygiene (ASTMH) 2023 Annual Meeting in Chicago, and the AMMnet Pre-ASTMH Modeling Meeting"
  },
  {
    "objectID": "program/program_resources/program_materials.html",
    "href": "program/program_resources/program_materials.html",
    "title": "Program Materials",
    "section": "",
    "text": "Program Handbook and Team Best Practices\n\n\n\n\n\n\n\n\n\n\n\n\nProgram Handbook\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBest Practices\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "program/program_resources/program_faq.html",
    "href": "program/program_resources/program_faq.html",
    "title": "FAQ",
    "section": "",
    "text": "Answers to frequently asked questions about the program."
  },
  {
    "objectID": "program/program_resources/program_faq.html#eligibility-applications",
    "href": "program/program_resources/program_faq.html#eligibility-applications",
    "title": "FAQ",
    "section": "Eligibility & Applications",
    "text": "Eligibility & Applications\n\nAm I eligible to participate?\n\n\nI can’t travel to the United States. Can I participate?\n\n\nHow do I apply?\n\n\nHow much does it cost to apply?\n\n\nI’m not eligible for the program / can’t attend. How can I learn to use EMOD for malaria modeling?"
  },
  {
    "objectID": "program/program_resources/program_faq.html#funding",
    "href": "program/program_resources/program_faq.html#funding",
    "title": "FAQ",
    "section": "Funding",
    "text": "Funding\n\nHow much does the program cost?\n\n\nHow can I get funding to support my participation in the program?"
  },
  {
    "objectID": "program/program_resources/program_faq.html#logistics",
    "href": "program/program_resources/program_faq.html#logistics",
    "title": "FAQ",
    "section": "Logistics",
    "text": "Logistics\n\nWhen does the program start?\n\n\nWhat are the pre-program requirements?\n\n\nWhere will I live and work during the program?\n\n\nHow do I register for ASTMH?"
  },
  {
    "objectID": "program/program_resources/program_faq.html#program-milestones",
    "href": "program/program_resources/program_faq.html#program-milestones",
    "title": "FAQ",
    "section": "Program Milestones",
    "text": "Program Milestones\n\nWhat is expected from each oral presentation?\n\n\nWhat does it mean to ‘facilitate’ journal club?"
  },
  {
    "objectID": "program/program_resources/session_recordings/recorded_tutorials/tutorial_EMOD_outputs.html",
    "href": "program/program_resources/session_recordings/recorded_tutorials/tutorial_EMOD_outputs.html",
    "title": "EMOD Outputs & Analyzers",
    "section": "",
    "text": "Back to Recorded Tutorials\nTrack and report data from simulations."
  },
  {
    "objectID": "program/program_resources/session_recordings/recorded_tutorials.html",
    "href": "program/program_resources/session_recordings/recorded_tutorials.html",
    "title": "Tutorials",
    "section": "",
    "text": "Back to Session Recordings\nPractice new concepts in hands-on group coding sessions, with live problem-solving and debugging"
  },
  {
    "objectID": "program/program_resources/session_recordings/recorded_discussions/in-country_challenges.html",
    "href": "program/program_resources/session_recordings/recorded_discussions/in-country_challenges.html",
    "title": "In-Country Challenges",
    "section": "",
    "text": "Back to Recorded Discussions\nDuring the program you are immersed in an environment devoted to applied malaria modeling and your research projects, but this likely isn’t the case at your home institution. There may be challenges for your time as well as technical capacities. In this session we’ll discuss some of these difficulties as well as the potential impact of taking what you’ve learned during your time at Northwestern home"
  },
  {
    "objectID": "program/program_resources/session_recordings/recorded_discussions.html",
    "href": "program/program_resources/session_recordings/recorded_discussions.html",
    "title": "Discussions",
    "section": "",
    "text": "Back to Session Recordings\nRoundtable discussions and other informal sessions"
  },
  {
    "objectID": "program/program_resources/pre_program_checklist.html",
    "href": "program/program_resources/pre_program_checklist.html",
    "title": "Pre-Program Checklist",
    "section": "",
    "text": "Come prepared to make the most of the program\n\n\n\n\n\n\n\n\n\n\n\n\nReview Malaria Epidemiology\n\n\n\n\n\n\n\n\n\n6/21/23\n\n\n\n\n\n\n\n\n\n\n\n\nPrepare for Journal Club 0\n\n\n\n\n\n\n\n\n\n6/22/23\n\n\n\n\n\n\n\n\n\n\n\n\nCoding Assignment\n\n\n\n\n\n\n\n\n\n6/23/23\n\n\n\n\n\n\n\n\nNo matching items",
    "crumbs": [
      "2023 Program",
      "Pre-Program Checklist"
    ]
  },
  {
    "objectID": "program/program_resources/program_materials/best_practices/best_practices_journal_club.html",
    "href": "program/program_resources/program_materials/best_practices/best_practices_journal_club.html",
    "title": "Expectations for Journal Club",
    "section": "",
    "text": "Back to Best PracticesBack to Journal ClubBack to Program Handbook\nExpectations for participating in Journal Club as a leader or discussant\n\nObjectives of the applied modeling journal club\nThrough reading and discussing this series of papers, program participants will be introduced to the field of applied malaria modeling. Participants will see past applications of EMOD as well as a few other individual-based models that have been used to inform policy. The chosen papers reflect a wide range of topics such that participants will be exposed to different model capabilities.\nEven if a particular paper is of limited relevance to someone’s project, each paper and discussion is an opportunity to practice critical reading. Where did the model do well? What were its limitations? Was the approach rigorous? Did the results make sense, and were they presented clearly? Was the model fit for purpose? These are all questions we need to ask of ourselves in our own applied modeling work. Journal Club lets us practice thinking through how to answer these questions together.\n\n\nGuidance for leaders\nJournal club leaders are expected to be able to walk discussants through the paper, explaining the following on the content of the paper:\n\nMotivation for the work\n\nApproach used\n\nWalk through each figure, including methods and results\n\nMain conclusions\n\nJournal club leaders should also have prepared their own thoughts on the analysis of the paper:\n\nStrengths and limitations of the model\n\nTo what extent the conclusions are supported by the results\n\nWhat further evidence would support the modeling results\n\nWhat would be other interesting questions to ask, using either the approach in the paper or other approaches (modeling or not)\n\n\nBefore\n\nRead the assigned paper at least 3 days prior to the session\nPrepare answers to the content and analysis points above and note anything confusing\nDiscuss answers with buddy and clarify points of confusion\n\n\n\nDuring\n\nLead everyone through reviewing the content of the paper, making sure everyone understood what was done and why\nLead everyone through a discussion of the analysis of the paper, covering each of the analysis points listed above, and bringing in new questions and ideas\nManage the discussion so everyone contributes and no one dominates\nManage the overall pace such that the entirety of the paper and the discussion points are covered\n\n\n\nAfter\n\nFollow up on any questions raised during the discussion that could not be answered at the time\n\n\n\n\nGuidance for discussants\n\nBefore\n\nRead the assigned paper prior to attending the journal club session\nMake notes and mark any questions you may have to discuss with the group\n\n\n\nDuring\n\nBe an active participant so we can all learn from each other’s ideas\nIf you have a question, others will too. We are here to learn"
  },
  {
    "objectID": "program/program_resources/program_materials/best_practices/team_communication.html",
    "href": "program/program_resources/program_materials/best_practices/team_communication.html",
    "title": "Team Communication",
    "section": "",
    "text": "Back to Best Practices\nHow to stay informed and ask for help"
  },
  {
    "objectID": "program/program_resources/program_materials/best_practices/team_communication.html#slack",
    "href": "program/program_resources/program_materials/best_practices/team_communication.html#slack",
    "title": "Team Communication",
    "section": "Slack",
    "text": "Slack\nSlack is the preferred method of electronic communication on our team. Generally, team members are expected to respond to one another within 24 hours (within normal working hours). You are welcome to join any of the Slack channels; some are more active than others.\nYou are expected to be on Slack when you are working. Slack will be the primary means of communication with NU team members. You can join any channel on slack or start a new one - but these are some of the most often-used:\n\nChicago Channel\n\nPost daily “to-do list” of tasks you’re working on\n\nKeep an eye out for team-wide announcements\n\n\n\nFE 2023 Channel\n\nAnnouncements and questions specific to the Faculty Enrichment Program should be posted here by both staff and participants\n\nFeel free to share outputs, items of interest, or other things relating to the program – this is your space!\n\n\n\nHelp Channel\n\nPost error messages / other issues here (along with your code & relevant outputs). You’re more likely to get a quick response, and others will benefit from seeing the solution too.\n\n\n\nCelebrations Channel\n\nProud of an accomplishment (program-related or otherwise)? Post it here so we can celebrate with you!"
  },
  {
    "objectID": "program/program_resources/program_materials/best_practices/team_communication.html#university-email",
    "href": "program/program_resources/program_materials/best_practices/team_communication.html#university-email",
    "title": "Team Communication",
    "section": "University email",
    "text": "University email\nYou should be given access to a Northwestern email account and are free to use it as you see fit. However, it may be best to use a personal or home institution email for longevity of communications as NU email access may be limited after the program end.\nNorthwestern University administrators will use your Northwestern email for official communication, so make sure to check it occasionally."
  },
  {
    "objectID": "program/program_resources/program_materials/best_practices/team_communication.html#calendars",
    "href": "program/program_resources/program_materials/best_practices/team_communication.html#calendars",
    "title": "Team Communication",
    "section": "Calendars",
    "text": "Calendars\nAll meeting invites will be shared with you in advance – please be sure to stay on top of your calendar and attend all meetings in a timely fashion."
  },
  {
    "objectID": "program/program_resources/program_materials/best_practices/team_communication.html#meetings",
    "href": "program/program_resources/program_materials/best_practices/team_communication.html#meetings",
    "title": "Team Communication",
    "section": "Meetings",
    "text": "Meetings\n\nMeetings with your buddy\nWeekly 1-on-1 meetings will be held with your assigned buddy. These are designed to help you stay on track with learning materials and your project. You may use this time as you see fit but it is recommended that you discuss any problems you may be encountering in your work, results, next steps, and other questions. You and your assigned buddy will discuss any additional expectations during your first sessions to make the best use of this time.\n\n\nMeetings with Jaline\nWeekly 1-on-1 meetings will also be held with Jaline to discuss project progress, ideas, and needs. This meeting will be similar to buddy 1-on-1s and sometimes may be held together as a 2-on-1 to ensure that you are getting the best support possible throughout the program and everyone is on the same page. It is your responsibility to make the most of your meetings with Jaline, which includes being prepared with what you would like to discuss.\n\nJaline’s meeting policy:\nIn general, I have an open-door policy. If my office door is open, I am happy to answer questions or talk about your work—if I don’t want to be disturbed, I will close my door. Please ping me on Slack at any time and I will respond as soon as I can. However, I am not always available, so if there is something important that will take a substantial time to discuss, it is best to schedule a meeting with me.\nWhat should you bring to a meeting with me? It is your job to make the most of this time and usually that means coming in with a list of what you’d like to talk about. Here is what we will generally cover:\nWhat you have done: Generally I prefer that you keep me/the group aware of new analyses via Slack. But the 1-on-1 is also a good time to talk over interesting results or roadblocks:\n\nWhat analyses have you done since the last time we met? I want to see all your new results, analyzed and in pretty graphs. We may also take a deeper dive to look at individual results or brainstorm new analyses, so bring that with you.\n\nIf you don’t have results, why not? What roadblocks are you facing and how are you working through them? What analyses or simulations are in progress?\n\n\nHow are writing projects coming along?\n\nI am asking for this information not to evaluate if you are working hard enough, but to see how your project is progressing.\nIdeas: what do your results mean? What should we do next? Do we have what we need to do it?\nWhat do you need from me? This is the time to let me know if you need a signature, a letter of recommendation, a progress report, extra compute resources, or new software.\nAnything pertinent to your professional development or well-being. Are you progressing towards your goals for the program? If there are any issues in or outside of the workplace that may hinder your progress, this is a time to talk about it.\nI strongly recommend you keep a log of your weekly 1-on-1’s, noting what was discussed and any next steps you’re planning to do."
  },
  {
    "objectID": "program/program_resources/program_materials/best_practices/team_communication.html#getting-help",
    "href": "program/program_resources/program_materials/best_practices/team_communication.html#getting-help",
    "title": "Team Communication",
    "section": "Getting Help",
    "text": "Getting Help\n\nHelp with Code\nWe find that learning by doing is incredibly useful to improving our skill and knowledge bases. In this process, things will inevitably go awry. These mishaps provide a learning opportunity and while annoying should not be seen as discouragement to continue. There are a variety of ways to seek help – the flowchart below can help you walk through the process of where and how to get the help needed for a few types of anticipated problems. Below that are team expectations for what these steps entail.\nWhenever asking for help with errors, please provide detailed information about:\n\nthe error message\nthe script you are trying to run\nwhat you already tried to resolve the error\n\nDepending on the type of error further details on your system setup and program versions might be needed as well. This will ensure that whoever responds can give the best answer in less time.\n\n\nTroubleshooting Steps\n\nCheck for Existing Answers\n\nEMOD: Check the FE example exercises, how-tos, and coding resources for anything helpful. This is especially useful when you don’t know or have forgotten how to add certain things to your script.\n\nFor EMOD capabilities and parameter-related questions, the EMOD malaria documentation from IDM contains the most relevant information.\n\nPython, R, GitHub: Search the internet more broadly. Sites such as stack overflow or package documentation (if questions on a specific function) can be particularly helpful for general coding questions. If you find a solution on one of these sites, make sure that you spend some time to understand what they are doing to fix the problem – do NOT just copy and paste.\nSearch the #help channel on Slack to see if a similar question has been answered by the team previously. There are many common questions and errors experienced in running EMOD, so this space contains many useful answers\n\nAsk peers for help\n\nIf you have tried searching online for coding troubleshooting or have general scientific question about your work, your peers are a great place to seek help. You are all learning together and come from a variety of scientific backgrounds. We highly encourage you to discuss any errors you are encountering or questions you have with each other you may be able to solve the problem together without further assistance. This peer discussion process can also be helpful in cementing what you have learned through teaching.\n\nPost on Slack\n\nIf you have not found a solution after searching online and discussing with peers, then we recommend posting on the #help channel on slack so everyone can see your question. This will also help yourself and others in the future who are asking similar questions. Of note, not everyone is in the same time zone so you may need to wait for others’ availability. This is an interactive process where you will often have to try many things. Below is a checklist to help you shape posts for the #help channel so you and others can get the most out of it.\nMaking the most of posting to the #help channel\n\nError message: Include the entire error message in your post so the channel can fully understand the problem. It is preferable to include the text of the error message rather than just a screenshot so the key words will pop up in future searches. You may include the most important part of the text and a screenshot of the entire message if it is a particularly long error\nLink to code where the error is occurring: It is much easier for others to help you solve your problem if they can see the code that is generating the error. The easiest way to share this is through your GitHub repository, if it is up to date and viewable to team members. Be sure to link to the exact script and include any pertinent information (such as lines the error is coming from)\nContext of the error: What were you doing when the error occurred? It can be helpful to know what the goal of the script is (e.g., running simulations, analyzers, etc.) as well as the answers to the following questions:\n\nDid it ever work?\nIs this a new error?\nWhat has changed since it last worked?\n\nWhat have you done to try to solve it: Include specifics of solutions you’ve tried and how you’ve changed the code. Saying that you searched online and talked to a peer does not help the channel understand what you have done and how it impacted the error. Without this information the channel may suggest potential solutions you’ve already tried which wastes everyone’s time. Furthermore, including failed potential solutions can sometimes help us better understand what the problem is as sometimes error messages are not particularly helpful on their own.\n\nIf you find a solution to a complicated problem that you think others would benefit from knowing, feel free to post it to the channel with the same kinds of details!\n\nOffice Hours\n\nOffice hours are protected, structured touchpoints that all members of the instructional staff will host to facilitate your learning experience. Most staff will have one hour scheduled per week dedicated to answering questions and providing assistance. This set aside time helps to ensure that someone is accessible to answer questions and talk about your work, without distraction, most days. You are encouraged to show up to any of the office hours – it does not have to be your buddy or the lecturer on the relevant topic as all of the staff should be able to assist or identify others if needed. This time can be used for many topics including errors encountered, general EMOD questions, or asking for feedback.\nFor technical problems, office hours are particularly helpful when you have already tried a few methods of solving the problem yourself (see flowchart and code troubleshooting, below). Come prepared to discuss 1. the error that you are encountering 2. what you think may be causing the error/changes made since the code last worked, and 3. any methods you have tried to solve the problem. Be sure to have all documentation ready to help the staff understand the problem (such as pushing your code to GitHub, a copy of the full error message, etc.)\nOffice hours can also be used for consultations on project design and scientific approach to the project.\n\n\nNote that outside of 1:1s and office hours, instructional staff may not be immediately available for help due to their other obligations. You may bring additional questions to 1:1 sessions.\n\n\n\nLogistics\nContact Shannon on Slack or in the office. Reach out to her as soon as possible as sometimes bureaucratic problems can take time to solve. Logistical problems include:\n\nAccessing team/NU resources, such as dropbox, email, and DUO\nExpenses/reimbursements\nHousing\nArranging visitor travel\nASTMH registration"
  },
  {
    "objectID": "program/program_resources/program_materials/best_practices/sci_comm_standards.html",
    "href": "program/program_resources/program_materials/best_practices/sci_comm_standards.html",
    "title": "Scientific Communication Standards",
    "section": "",
    "text": "Back to Best Practices\nBest practices for writing, presentations, and designing plots/figures"
  },
  {
    "objectID": "program/program_resources/program_materials/best_practices/sci_comm_standards.html#writing",
    "href": "program/program_resources/program_materials/best_practices/sci_comm_standards.html#writing",
    "title": "Scientific Communication Standards",
    "section": "Writing",
    "text": "Writing\n\nGeneral Resources\n10 Simple Rules for structuring papers 10 Simple Rules for improving your writing productivity\n\n\nSpecific Aims\nThe Specific Aims page is a 1-page document that summarizes the motivation, significance, innovation, and approach of your proposed project. Writing an Aims page will help you define your project concisely and communicate why it is worthwhile.\nWe recommend following the document setup guidelines here since this will give you the most space while staying within NIH guidelines.\nFrom BioScience Writers:\n“The Specific Aims section is the most vital part of any NIH grant application. In this section, you must quickly gain the reviewers’ trust and confidence while simultaneously convincing them that your work is important to fund. You must also convey that you and your team are the best people to complete the work you’ve proposed. For these reasons, the Specific Aims can be one of the most difficult sections to write. In this article, we provide some tips on structure, content, and organization of your Specific Aims page.”\nBegin by watching these two excellent videos:\n\nWriting Introduction: The Rhetorical Pattern of Introductions in Aims Pages\nWriting Aims/Conclusion: Patterns and Content in the Specific Aims and Conclusions in Aims Pages\n\nThen respond to each of these questions to create an outline for your Aims page:\n\nGeneral context and significance: What is the “big picture” for research? Why is it important?\nNarrowing context: What is known and accepted in your research area?\nYour research contribution: Has your previous work contributed? How?\nComplication: What is the problem, roadblock, the unknown?\nLong-term goal: What final “big results” will research help achieve?\nSpecific goal of this research: “What is “specific narrow goal” of this research?\nSummary of research—path to hypothesis: How does previous research lead to hypothesis?\nHypothesis: What do you believe to be the answer to the complication?\nQualifications stressed: What makes you the right person to undertake the research?\n\nFrom this outline, you can start writing the first draft of the Aims page.\n\n\nNIH Biosketch\n\nOfficial instructions for the NIH Biosketch. Use the “Non-Fellowship” biosketch format and download a sample document that has the correct formatting.\nStart by filling in the header information (Name, ERA commons name, position title, education and training)\nNext, write part C, contributions to science\nNext, fill in part B, positions and honors\nFinally, finish with part A, the personal statement\n\n\nExcellent instructions from Better at the Bench, which cites a workshop by Orit Rapaport:\nTackling the Contributions to Science Contributions by the numbers\n\nWrite up to five contributions to science\nInclude up to four publications or research products per contribution\nTypically, each scientific contribution (including the publications) should occupy about half a page. What is the definition of a publication or research product?\nYou can only include/cite accepted publications. However, you can mention papers in progress in the text.\nYou are allowed to include/cite preprints or other interim research products. However, you need to cite them properly. For full instructions regarding citing preprints or interim research products, refer to notice NOT-OD-17-050.\nResearch products can include, but are not limited to the following: audio or video products; conference proceedings such as meeting abstracts, posters, or other presentations; patents; data and research materials; databases; educational aids or curricula; instruments or equipment; models; protocols; and software or netware. For more information about each category above, you can download the NIH Guide to Categorizing Products. Orit’s five step guide to writing your contributions to science\nGather all of your papers and research products\nRead through all your materials to re-familiarize yourself with the papers and research products.\nDivide these papers and research products into a maximum of five groups (where there is a maximum of four papers/research products per each of the five groups/contributions). Orit mentioned that the manner in which you set up your groups/contributions is entirely up to you, but here are a few that are commonly used:\n\nCareer phases — Early (undergrad), graduate, and postdoctoral career\nDifferent perspectives in science\nDevelopment of different state of the art tools\nVarying translational impact\n\nInstead of jumping directly into your research, for each contribution to science write a narrative/short story that includes these five components:\n\nAn opening or introduction of a problem in the field\nA challenge in the form of a gap in knowledge or motivation\nAn action, which consists of what you did (your research contribution)\nA climax, where you describe a result and its significance\nA conclusion, end the paragraph with a statement indicating how this research has transformed or advanced the field\n\nCite up to four papers/research products for each scientific contribution\n\nNote, here you want to be a bit strategic. Maximize your citations! If you have more than four papers that you want to cite in a single scientific contribution, consider splitting the scientific contribution to allow for citing all your papers.\nNote, bold your name in each citation to help the reviewer identify your name in the list of authors. Include a link to a bibliography at the end (optional)\n\nThis is optional, but Orit highly recommends that you include a link to your full bibliography at the end of your contributions to science. Importantly, the URL you provide must be from a Federal Government website (aka. you cannot use Google Scholar). It is highly recommended that you use the My Bibliography option that can be setup through My NCBI.\n\nTackling the Positions and Honors It’s time to brag about yourself and how awesome you are! :) Read the full instructions on the NIH Grants and Funding website and the NIH General Application Guide for NIH and other PHS Agencies, but here are a few of the important details:\n\nList positions and honors in chronological order (oldest to newest/current)… you can list a future position/employment, just include the expected start date.\nLook at the examples, the positions and honors for both fellowship and non-fellowship applications is roughly divided into three sections:\n\nPositions and employment — Your postdoc can be listed as a position (in addition to adding it to the header). You can include TA work here.\nOther experience and professional memberships — You can include volunteer work here.\nHonors — You can include travel awards here.\n\nList any relevant academic or professional achievements and honors.\n\nFor students, postdocs, and junior faculty this includes scholarships, traineeships, fellowships, and development awards.\nFor clinicians this includes clinical licensures and specialty board certifications.\n\nNote, certain large honors (like receiving an F31 as a graduate student) can and should be listed in multiple sections of your biosketch — it should be included as an honor (part B), but it can also be mentioned in your contributions to science (part C), mentioned in your personal statement (part A), and included in your research support (part A, highlighted projects).\n\nTackling the Personal Statement Last, but not least, it’s time to write the personal statement! Orit suggests writing the personal statement at the end, because it will be tailored to the specific proposal. As with all other sections of the biosketch, read carefully through the instructions in the NIH General Application Guide for NIH and other PHS Agencies.\nPersonal statement instructions\n\nBriefly describe why you are well suited for your role(s) in this project.\nShould include aspects of your training, previous experimental work on this topic, your technical expertise, your collaborators, your scientific environment, and/or past performance in this field.\nAt the end, you may cite up to four publications or research products that highlight your experiences and qualifications for this project.\nNote, this is also where you have the opportunity to address factors that affected past scientific productivity (including a death in the family or other obligations).\nNot explicitly written in the instructions, but the personal statement should be written in the first person and should fit on the first page (excluding the four citations).\n\nGoals for the personal statement Orit mentioned that the goals for the personal statement differ depending on if you are applying for a fellowship or non-fellowship, so keep this in mind when writing.\n\nFellowship (F-grant) goals: The personal statement should describe how the research proposed will provide you with the best possible training to advance your career.\nNon-fellowship/career transition (K-grant) goals: The personal statement should describe how the research proposed will help you transition to an independent academic position.\n\nSuggestions for writing the personal statement By walking us through a well-written personal statement, Orit described lay out a excellent format to follow:\n\nStart with career goals and motivations\nTransition towards an exhibition of your research experience and here incorporate references to what you have already accomplished in science.\nEnd with a statement regarding how the research proposed in this grant will advance your career. Here it is important to show some aspect of growth. Explain how the research proposed will (1) provide the training necessary to allow you to find your science niche and (2) help you use new tools (or a new perspective) to make significant advances in science.\n\nAdditional notes and final thoughts A few final thoughts from Orit’s workshop:\n\nNo diagrams or figures are allowed in the biosketch.\nDon’t forget to update your biosketch over time (continue to add positions and honors, update funding, update scholastic performance/grades, etc).\nThe biosketch should be tailored to each specific proposal.\nFor the NIH, you will attach the biosketch as a PDF file.\nThe biosketch cannot be longer than 5 pages long.\nMake sure you adhere to other NIH guidelines regarding font type, font size, margins — refer to the NIH format guidelines.\nShare with others, get feedback, and edit!\n\n\n\n\nPeer Editing Hour\n\nFor Author\nCome prepared with ~1 page of writing. Please send this to Shannon by the 9am CT the day of your peer editing session so she can ensure everything is in the right format to share with the team. Ideally, your writing should be in decent shape (i.e., not a messy first draft) by the time you are sharing it with the team. Be prepared to introduce your piece (context, audience, etc.) and read your writing aloud to the group, one paragraph at a time, and receive feedback as we go. The facilitator will document comments and changes to the text for you. You may receive feedback on writing style, word choice, sentence structure, grammar, general comments and questions about the work, etc. This time is meant to be constructive and help you improve your final product, so please make the best use of it possible.\n\n\nFor Facilitators\nYou will be responsible for documenting any changes, suggestions, or comments on the work presented – you do not need to be familiar with the work in advance. At the beginning of the hour, make sure that the document is in “track changes” mode so the author will be able to easily see any modifications when looking back at their work. Please be detailed in recording all comments so they can be as useful as possible.\n\n\nFor Audience\nBring your best constructive criticism and writing ideas! Be open to sharing your thoughts, big and small, to help your colleagues improve their writing. Authors may present work in various stages of development and/or completeness so ask clarifying questions as needed. This may be especially relevant for excerpts from specific sections of manuscripts where you may not understand the context (e.g., what is included in the first half of the background/introduction while we are editing the second half). Be sure to consider any information provided by the author when introducing their writing, such as the intended audience."
  },
  {
    "objectID": "program/program_resources/program_materials/best_practices/sci_comm_standards.html#plots-figures",
    "href": "program/program_resources/program_materials/best_practices/sci_comm_standards.html#plots-figures",
    "title": "Scientific Communication Standards",
    "section": "Plots & Figures",
    "text": "Plots & Figures\nAny figures you make should be clear and thoughtful in content. They should help convey the story you are trying to tell and highlight key results. You should always spend time to think through what you are trying to show and why as this will lead your design process. Just because you’ve seen or made a figure in the past does not mean that it will be the best way to show your current results. Likewise, consider your audience and the style of presentation of your figures. Are you presenting to experts in the field? Non-scientists? Are you preparing an oral presentation or paper? Each of these will have different implications for your figure so it can be the most appropriate and impactful. For more extensive best practices for scientific figures, check out PLOS Computational Biology’s article: 10 Simple Rules for Better Figures. Some key points that you should take away, that are not already mentioned, are to think through color, legends, and labeling. Oftentimes, the R and python defaults will not provide the best setup for a nice figure in these areas so you may need to adjust them to better tell your story. For example, color can help distinguish differences between simulations and can convey grouping and should be thought out for single figures as well as multiples contained in the same presentation or paper.\n\nPresentations\nFor figures included in presentations, the font size should be at least 16pt. You do not have to include as detailed of a caption as you would in a paper; however, your slide title should include the key takeaway for the slide and figure, and you should be prepared to walk your audience through the figure as you present. Do not crowd a slide with too many figures, especially ones that are more complex. If you must include multiple figures on one slide, use animations to build the slide up and keep your audience focused on one figure at a time.\n\n\nPapers\nFor figures included in papers, the font size should be at least 8pt. You must include a caption that concisely explains the figure. Avoid overcrowding of the space and ensure that all aspects are differentiable and legible."
  },
  {
    "objectID": "program/program_resources/program_materials/best_practices/sci_comm_standards.html#presentations-talks",
    "href": "program/program_resources/program_materials/best_practices/sci_comm_standards.html#presentations-talks",
    "title": "Scientific Communication Standards",
    "section": "Presentations / Talks",
    "text": "Presentations / Talks\n\nFor Speaker\nThe most important things for the speaker to keep in mind is who is the audience and what are the objectives of the presentation. What is the single take-home message you would like to communicate? Everything in your talk should build toward that single message.\nReview PLOS Computational Biology’s 10 simple rules for effective presentation slides to understand general expectations for slide decks. Key takeaways include using slide headers as a summary sentence for the contents, with one main idea per slide, and designing slides to minimize distraction and overload that will prevent your audience from getting the full benefit of your talk. You should also review this document’s section on figures for presentations.\nBe sure to consider your audience and their background knowledge of the subject, as well as time limit when drafting slide decks as this will guide the level of depth and what to focus on. Understanding your audience will also help you frame your presentation to give appropriate background and motivation for your work and to emphasize the importance and implications of your results both generally and for the audience specifically.\n\n\nFor Audience\nDuring presentations, all audience members are expected to be active and respectful listeners who give the presenter their undivided attention. We encourage asking questions both during and after the talk – if you are confused, chances are someone else is too. It should be noted that during certain presentations questions and comments should be saved for the end. This is typically only the expectation of practice talks while team meetings are open to questions at any time, and this type of special consideration will be established before the presentation starts.\nAfter practice talks, all attendees are expected to provide comments and/or ask questions about the presentation in order to help the speaker improve before their official presentation. Speakers may ask for specific kinds of feedback which can help guide your commentary. If not, comments on presentation style and content are welcome. All comments should be constructive in nature and typically should not be repeated (i.e. a speaker does not need to hear “you should improve X” multiple times). You should be prepared to provide thoughtful feedback to all presenters, even if they are presenting on something outside your technical expertise, as we believe everyone has something valuable to contribute."
  },
  {
    "objectID": "program/program_resources/program_materials/nu_team_best_practices.html",
    "href": "program/program_resources/program_materials/nu_team_best_practices.html",
    "title": "Best Practices",
    "section": "",
    "text": "How to work together better, because we work better together\n\n\n\n\n\n\n\n\n\n\n\nConduct, Ethics, and Team Culture\n\n\n\n\n\n\n\n\n\n\nTeam Communication\n\n\n\n\n\n\n\n\n\n\nCode Standards\n\n\n\n\n\n\n\n\n\n\nSimulation Standards\n\n\n\n\n\n\n\n\n\n\nScientific Communication Standards\n\n\n\n\n\n\n\n\n\n\nExpectations for Journal Club\n\n\n\n\n\n\n\nNo matching items",
    "crumbs": [
      "2023 Program",
      "Best Practices"
    ]
  },
  {
    "objectID": "program/program_resources/pre-program/coding_assignment.html",
    "href": "program/program_resources/pre-program/coding_assignment.html",
    "title": "Coding Assignment",
    "section": "",
    "text": "Back to Pre-Program Checklist\nComplete the pre-program Coding Assignment to (re)familiarize yourself with some basics in R and python\n\nPre-Requisites\nDespite having a variety of backgrounds, we aim for all participants to arrive familiar with certain programming skills, most of which are needed to complete the pre-program Coding Assignment.\nIf you are unfamiliar with any of the skills in the table below, please review the self-led tutorials at the links provided to learn.\n\n\n\nPython\nR\n\n\n\n\n\nVariables and Types\nLists\nBasic Operators\nStrings - slicing, splitting, case\nConditions - and, or, in, is, not\nLoops - for and while\nFunctions\nClasses and Objects\nDictionaries\nModules and Packages\nNumpy Arrays\nPandas Basics\n\n\nBasic Syntax\nData Frames\nData Cleaning - tidyr\nData Visualization - ggplot2\nAggregate Functions\nJoining Tables - dplyr\n\n\n\nSelf-led “Intro to Python” Tutorials\nSelf-led “Learn R” Tutorials\n\n\n\n\n\nAssignment Overview\nThis assignment is designed to review core competencies of R and python coding that you will use throughout the program. It is not a test but rather the first component of the technical program, through which we develop these skills alongside more advanced modeling techniques.\nThe first assignment asks you to demonstrate your ability to use the pre-requisite skills to:\n1. Use python to “analyze” (process, clean, and merge) data from multiple files to produce a single output spreadsheet.\n2. Use R to wrangle, summarize, and plot the cleaned output data from Part 1.\nThis assignment is due at the end of Week 0.\nStuck?\n\nReview the tutorials in the table above\n\nPost on the FE-2023 Slack Channel\n\nWe will hold (virtual) Office Hours in Week 0 to answer questions and help out!\n\n\n\nInstructions\n\nPart 0. Get a copy of the example data\n\nGo to the coding assignment repository\nObtain a local copy of the example_data/ folder\n\nDownload and unzip the folder to a new folder on your computer, …/project_dir\n\nExamine a sample output.csv file from the example data.\nYou will have to click through some subfolders to see one. This is common for outputs from the model, EMOD, which you will soon become very familiar with!\n\nIn reality, the output files in EMOD can be .json dictionaries or .bin binary files in addition to .csv spreadsheets. However, to make the assignment simpler, we’ve created some “fake” output files in a form that is easier to work with.\n\nEach output.csv file contains daily timeseries of 3 dependent variables [Var1, Var2, and Var3] for a specific combination of the grouping variables [Site, Trial_Number, and Arm]\n\n\n\n\nPart 1. Python - analyze example data\n\nCreate a new my_python_script.py file in the same /project_dir where you saved the example_data folder\nYour directory structure should be:\n\nproject_dir/\n\nexample_data/\n\n…\n\n\nmy_python_script.py\n\n\nImport the following modules: pandas, numpy, os\nCombine data from the output.csv file in each example_data/simulation/ sub-folder into a single DataFrame, with the following modifications:\n\nKeep all grouping variables (“Day”, “Site”, “Trial_Number”, and “Arm”)\n\nRestrict to include only values in the last 365 Days\n\nSave the values for “Var1” and “Var3” in each group\n\nDo not save the values for any other variables that may have been in output.csv !\n\n\nAppend results from all simulations together.\n\nSave the resulting DataFrame as output_cleaned.csv\n\n\n\nPart 2. R - transform and visualize output\nDid you generate the output from Part 1?\nThis must be done before starting Part 2.\nYour directory structure should now be:\n\nproject_dir/\n\nexample_data/\n\n…\n\n\nmy_python_script.py\n\noutput_cleaned.csv\n\n\n\nOpen Rstudio: File &gt; New Project &gt; Existing Directory &gt; project_dir\nCreate a new my_R_script.Rmd file or my_R_script.R script inside project_dir to do the following:\n\nRead in output_cleaned.csv\nAggregate the count, mean, and standard deviation of Var1 and Var3 (separately) on each day for a given Site\n\nThis will collapse all Trial_Numbers and Arms together\n\nUse mutate to add upper and lower 95% prediction intervals around the daily mean of Var1 and Var3 at each Site\n\nmean ± 1.96 * sd ÷ √n\n\nUse ggplot2 to produce plots of the data:\n\nDay on the x-axis, Var# on the y-axis\nSeparate lines and colors for each dependent variable (Var 1 and Var 3)\nSeparate facets for each Site\nAn informative title, labels, legend, color palette etc.\n\nYou don’t need to spend much time on plot appearance for this for this assignment, but it is an important part of communicating our findings\n\n\nSave your plot(s) as .png file(s) in project_dir/ with a descriptive file name (ex. “Variables1-3_by_Site.png”)\n\n\n\n\nPart 3. Submit to Slack\nPost your plot(s) to the FE-2023 slack channel for feedback.\n\nHow does it compare to others?\n\nIf something looks off, what do you think is causing it?\n\nFor more practice: Try creating the plots using different grouping variables (Ex. Trial_Number, or Arm) in addition to or instead of Site"
  },
  {
    "objectID": "program/program_resources/pre-program/journal_club_0.html",
    "href": "program/program_resources/pre-program/journal_club_0.html",
    "title": "Prepare for Journal Club 0",
    "section": "",
    "text": "Back to Pre-Program ChecklistBack to Journal Club\nRead the assigned article and review the Journal Club Best Practices to prepare\n\n\n\n\n\n\n\n\nJournal Club 0: Use of Mathematical Modeling in WHO Guidelines\n\n\n\n\n\n\nLo, N. C., Andrejko, K., Shukla, P., Baker, T., Sawin, V. I., Norris, S. L., Lewnard, J. A.\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "program.html",
    "href": "program.html",
    "title": "Program",
    "section": "",
    "text": "Pre-Program Checklist\n\n\n\n\n\n\n\n\n\n\n\n\n\nFAQ\n\n\n\n\n\n\n\n\n\n\n\n\n\nProgram Materials\n\n\n\n\n\n\n\n\n\n\n\n\n\nSession Recordings\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample Exercises\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "program/program_resources/pre-program/epi_crash_course.html",
    "href": "program/program_resources/pre-program/epi_crash_course.html",
    "title": "Review Malaria Epidemiology",
    "section": "",
    "text": "Back to Pre-Program Checklist\nMake sure you’re familiar with these fundamental concepts of malaria epidemiology\n\nPre-Requisites\nThe crash course in Week 0 will assume familiarity with certain concepts. If you are not familiar with them, please review these resources before the crash course:\nStatPearls - Epidemiology of Study Design\n\nObservational vs. Cohort vs. Experimental Studies\n\nCDC Principles of Epidemiology in Public Health Practice\n\nLesson One: Intro to Epidemiology\n\nKey features and applications of descriptive & analytic epidemiology\n\n\nLesson Two: Summarizing Data\n\nCalculating and interpreting mean, median, mode, ranges, variance, standard deviation, and confidence intervals\n\n\nLesson Three: Measures of Risk\n\nCalculating and interpreting ratios, proportions, incidence rates, mortality rates, prevalence, and years of potential life lost\n\n\n\n\nCrash Course Objectives\nDuring Week 0, we will host a malaria epidemiology crash course, focused on these learning objectives:\n\nDescribe malaria pathogenesis and disease burden metrics in humans\n\nDescribe factors that affect the disease burden, including impact of interventions and host factors such as age and immunity\n\nOverview of epidemiological methods for measuring malaria morbidity and mortality and how information can be collected\n\nIdentify examples of error, bias, confounding, and validity in malaria studies\n\nDescribe the life-cycle of human malaria parasites, key stages, and their relevance to transmission and control\n\nRelate the parasite life cycle to pathogenesis, immune responses, and interventions\n\nDescribe the life- and feeding cycle of malaria vectors"
  },
  {
    "objectID": "program/program_resources/program_materials/2023_program_handbook.html",
    "href": "program/program_resources/program_materials/2023_program_handbook.html",
    "title": "Program Handbook",
    "section": "",
    "text": "Full 2023 Program Handbook\nA comprehensive guide to this year’s curriculum, assignments, and learning objectives\n\n\n\n\n\n\n\nFull 2023 Program Handbook\n\n\n\n\n\n\n\nNo matching items\n\n\n\n\nExpectations\n\n\n\n\n\n\n\nAims Page Expectations\n\n\n\n\n\n\n\n\n\n\nExpectations for Journal Club\n\n\n\n\n\n\n\n\n\n\nPresentation Expectations\n\n\n\n\n\n\n\nNo matching items\n\n\n\n\nProgram Milestones\n\n\n\nWeek\nMilestone\nDue\n\n\n\n\n0\nPre-Program Coding Assignment\nJune 23, 2023\n\n\n2\nIntroductory Research Talk\nJune 29, 2023\n\n\n2\nSpecific Aims Ideas\nJuly 7, 2023\n\n\n3\nSpecific Aims Outline #1\nJuly 14, 2023\n\n\n4\nSpecific Aims Outline #2\nJuly 21, 2023\n\n\n6\nSpecific Aims Full Draft #1\nJuly 31, 2023\n\n\n6\nSpecific Aims Presentation\nAugust 2, 2023\n\n\n8\nSpecific Aims Full Draft #2\nAugust 18, 2023\n\n\n10\nSpecific Aims Full Draft #3\nSeptember 1, 2023\n\n\n11\nWork-in-Progress Presentation\nSeptember 6, 2023\n\n\n12\nSpecific Aims Peer Editing Hour\nSeptember 13, 2023\n\n\n12\nBiosketch Draft #1\nSeptember 15, 2023\n\n\n13\nSpecific Aims Full Draft #4\nSeptember 22, 2023\n\n\n14\nBiosketch Draft #2\nSeptember 29, 2023\n\n\n15\nSpecific Aims Final Draft\nOctober 6, 2023\n\n\n16\nBiosketch Peer Editing Hour\nOctober 11, 2023\n\n\n18\nFinal Project Presentation\nOctober 26, 2023",
    "crumbs": [
      "2023 Program",
      "Program Handbook"
    ]
  },
  {
    "objectID": "program/program_resources/program_materials/best_practices/code_standards.html",
    "href": "program/program_resources/program_materials/best_practices/code_standards.html",
    "title": "Code Standards",
    "section": "",
    "text": "Back to Best Practices\nBest practices for source control, commit messages, documentation, & project management\n\nGithub source control\nAll code must be kept on GitHub. Be sure to commit and push regularly. Best practice is to commit several times a day when actively coding and push AT LEAST daily. The end of the workday is a great time to push. This serves three important purposes:\n\nIt keeps us from losing track of our code if we overwrite a file or want to revert to an older version of a script. Every version of our code that has been committed and pushed can be retrieved if lost or overwritten. Code that has not been committed and push cannot be retrieved.\nSharing our code lets us learn from each other and reuse code developed by other team members. If your repository is private, your code is only visible to those with whom you have explicitly shared it.\nIt is very helpful for troubleshooting! When your code is online, it makes it much easier for other team members to understand the issue you are running into as they can see your entire repository, including the script with the problem. The GitHub version control will show the most recent version as well as allow exploration of any changes made to the script.\n\nGit can be tricky and we’ve all had to deal with git problems. Please don’t hesitate to ask for help on Slack (#help) or search the web as there are many existing resources, such as this tutorial from GitHub. You will learn it eventually and we have a lot of expertise on our team available to help make your life easier. Many of us use Sourcetree or GitHub Desktop to manage our repositories.\n\nCommit messages & descriptions\nWhen you make a Git commit, include a short but meaningful message that describes the changes that you are committing. Typical changes include new functionality, improved code, updated parameters, bugfixes and corrections among others. The commit message should provide information on type and reason of edits made (i.e., what changes did you make since the last commit?) and why (e.g., is this fixing a problem, adding new functionality, etc.). These commit messages can be short and to the point but should be helpful to you and others who may be going through the repository in the future. More advanced use allows for writing pull request messages when working from a developer and a clean master repository and you can read more about it once familiar with the basics of Git\n\n\n\nManaging your project\nIt is important to keep detailed notes for your project including design, progress, and analyses. The notes should be as comprehensive as possible to show so you can keep track of methods, changes you make, etc. By including all these details, you will be better equipped to make forward progress rather than going in circles and to eventually publish your results. A few key points:\n\nIt is never too early to start your project notes! You should start them as soon as you begin a project, so you have details from the entire process.\n\nThere are many different platforms that you can use to take your project notes depending on your preferences. Team members often use Word or Rmarkdown but there are other notes apps that can be just as effective. It is preferable to take online notes as they are both searchable and shareable.\n\n\nTemplate and example project notes files are available:\n\nProject Notes - Word Template\n\nProject Notes - Markdown Template\n\n\nStay organized and keep track of your workflow. You should include all necessary information for writing up the methods and results sections of a paper in addition to keeping track of incremental changes along the way.\n\nRecord what you did, what you saw as you made changes to your project. Keep good records of everything you try because you will try a lot and won’t remember everything you did.\n\nIt can be helpful to include all the details of your simulations at each update (i.e., Simulation ran for X years with X intervention details, etc.), even if this seems repetitive, so you can get a quick idea of what is going on. These detailed progress notes will help you avoid repeating the same steps unnecessarily.\n\nBe sure to include plots and discussion notes as you go as these will help you understand the outcomes of what you did and your thoughts on it.\n\nUseful tools include snippingtool or Greenshot to make screenshots of plots and error messages, and writing slack messages to yourself or have another place for quick reminders, code snippets, or notes.\n\n\n\nYour project notes should be accessible to anyone with whom you are regularly collaborating. For faculty enrichment, be sure to share your notes with Jaline, your buddy, and the rest of the instructional staff. We will go through this together during the project setup session."
  },
  {
    "objectID": "program/program_resources/program_materials/best_practices/team_culture.html",
    "href": "program/program_resources/program_materials/best_practices/team_culture.html",
    "title": "Conduct, Ethics, and Team Culture",
    "section": "",
    "text": "Back to Best Practices\nGeneral conduct, ethics, engagement, professional critique, and teamwork\n\nGeneral conduct\nAll members of the team, along with visitors, are expected to abide by this code of conduct. I expect cooperation from all members to help ensure a safe environment for everybody. This team is dedicated to providing a harassment-free experience for everyone, regardless of gender, gender identity and expression, age, sexual orientation, disability, physical appearance, body size, race, or religion (or lack thereof). We do not tolerate harassment of team members in any form. Harassment can include offensive verbal comments, sexual images in public spaces, deliberate intimidation, stalking, following, harassing photography or recording, sustained disruption of talks or other events, inappropriate physical contact, and unwelcome sexual attention. Members asked to stop any harassing behavior are expected to comply immediately. We expect members to follow these guidelines in all in person, phone, online communication, team-related events, university events, conferences, etc. If you are being harassed, notice that someone else is being harassed, or have any other concerns, please contact Jaline immediately. Please note that Jaline is a mandatory reporter, this means that she is required to report sexual misconduct to the Title IX office and may not be able to guarantee confidentiality.\n\n\nEthical conduct of research\nI expect team members to be honest in scientific communications both within and outside the team. I expect that credit will be given where credit is due, including in scientific writing. It is never okay to tamper with data, make up data, omit data, or fudge results in any way, and this will not be tolerated. Science is about finding out the truth, not about fitting a hypothesis or data that looks pretty. My goal is for our team to have a reputation for performing impeccably rigorous science in an open and transparent way.\n\n\nCulture of engagement and professional critique\nWe would like to foster a highly engaged research environment where everyone is included in discussions and professional critique is welcome. You are expected to think critically about your own work as well as others’ work, and to express your questions and opinions politely and professionally. Our aim for your time with the team is to grow your independence and for everyone to do great work — we are stronger when we give each other feedback and seriously consider each other’s suggestions. This includes giving me feedback on what you think I can do better and pointing out my blind spots. I will not penalize you for disagreeing with me but will be glad you’re speaking up.\n\n\nCulture of teamwork\nWe work on an incredibly important health problem that affects millions of people, and the faster we can work the sooner we can have a positive impact. This means that I don’t want you to spend weeks bashing your head against a problem if talking to someone else would mean it gets resolved more quickly. Think about where you add the most value: is it building software? Designing experiments? Thinking about science? Communicating with our partners? Lean into your strengths and let the team help you with other aspects of your work."
  },
  {
    "objectID": "program/program_resources/program_materials/best_practices/simulation_standards.html",
    "href": "program/program_resources/program_materials/best_practices/simulation_standards.html",
    "title": "Simulation Standards",
    "section": "",
    "text": "Back to Best Practices\nBest practices for experiment design, inputs/outputs, and using QUEST\n\nExperiment design\nWhen setting up a simulation experiment, be considerate about the number of parameters to change and scenarios to run. There is rarely a first single large simulation that will provide immediate answer at once and is correctly setup. Plan for multiple iterations that build up on another to gain confidence and better understanding before building a larger simulation experiment.\n\nPrepare a simulation plan (list of scenarios to run): which ones are the main simulation experiments you need to run in order to answer the research question? Which ones are out of scope?\n\nYou may find it helpful to create an excel sheet with the 1) parameter names and relevant values to explore and 2) combination of parameter values that define a simulation experiment to run. An example is provided [HERE]. More advanced use also includes notes about # number of scenarios, computational resources and time required.\n\nPilot before scaling up: Start simple and use a template scenario that has been validated, then add the intervention or feature of interest for one or a few settings before running all.\nTechnical feasibility before accurate predictions: It is OK to use placeholder parameters for test simulations to develop your code and scripts; however, do keep track of these and do not forget to update them to the correct parameters as soon as the initial testing is done.\n\nIn the pilot and test simulations, make sure to carefully investigate the input json and output files. See reviewing input and output files below.\n\nGive your simulation experiments meaningful names that can be versioned and tracked across iterations. For instance, any test runs may include ‘test’ in its name and have a v0, v1 or a date or similar included in the name or folder in which your simulations are stored.\n\nSome general best practices for scientific computing are described by PLOS Biology in addition to what we specifically recommend for members of this team.\n\n\nReviewing input & output files\nWhen designing new experiments, you should make sure to review input and output files to make sure your simulations are doing what you think they are. It can be tricky to get everything setup correctly the first time, even for experienced EMOD users, so this review process will help you verify prior to scaling up. Questions to check for investigating new simulation runs include:\n\nWere the campaigns actually deployed, at the correct coverage and time?\nHow often were the campaigns deployed?\nHow does the simulated population change over time?\nWhen running with burnin, was the burnin actually “picked up” successfully?\nSmall simulations allow for individual event reports, at what ages and how often did individuals get an intervention or change property?\nLook at the same metric (i.e. prevalence) noy only at aggregated level over time, but monthly.\nAre the agebins correctly set up, extracted in the analyzer and aggregated?\nHow do your plots compare to other known relationships?\n\n\n\nUsing QUEST\nQuest is Northwestern’s high-performance computing cluster (HPC) on which we run our EMOD simulations. Quest is a linux-based HPC with the workload manager slurm on it to schedule jobs among its users. Everyone will need to apply for access to the team’s Quest allocation, b1139, here. Once granted access, you will have 80GB of space on your home directory and access to the team allocation which has much more space. We recommend cloning GitHub repositories to the home directory but saving all outputs to an appropriate folder on the team allocation.\n\nResource Sharing\nBecause everyone on the team, as well as participating in the program, uses b1139 we need to be conscious of resource sharing. Please follow the best practices below so everyone can have the best experience using the cluster.\n\nBe aware of how long you expect your jobs to run. If they will take a long time, it is considerate to run fewer sims at once or to wait until times of low usage (such as evenings or weekends) to start the jobs. You can enable email notification for your submitted jobs using the #SBATCH --mail-type=ALL and #SBATCH --mail-user=&lt;your_email@northwestern.edu&gt; arguments. Once submitted, you can also check in the terminal via squeue -u &lt;username&gt; or squeue –A b1139.\nWhen running example exercises, or testing out new projects, you should run simulations on the partition ‘b1139testnode’, where you are less likely to be blocked by larger/longer jobs.\nIf you must run a “big job” with many simulations, discuss any urgent needs for the cluster as others may have time sensitive projects. Submit &lt;100 jobs at a time on b1139 to avoid “clogging” the cluster. It is easy to limit the number of jobs able to run at one time with idmtools, so you can submit all your jobs at once but only the specified “max_run_jobs” will run at one time. As simulations finish, the next ones will start automatically.\nDebug your simulations with small pilots (see experiment design) to make sure your simulations do what you expect before scaling up.\nManaging disk space, you can check for space used via typing homedu or checkproject b1139 in the terminal. Simulations should typically be stored in respective project folders on b1139 so they are accessible to other team members for troubleshooting and due to low storage limits on home directories. Be sure to remove old and/or failed simulations when they are no longer needed as they can occupy a great deal of storage space."
  },
  {
    "objectID": "program/program_resources/example_exercises.html",
    "href": "program/program_resources/example_exercises.html",
    "title": "Example Exercises",
    "section": "",
    "text": "Coming soon - start using EMOD right away with examples from our public repository"
  },
  {
    "objectID": "program/program_resources/session_recordings/recorded_lectures.html",
    "href": "program/program_resources/session_recordings/recorded_lectures.html",
    "title": "Lectures",
    "section": "",
    "text": "Back to Session Recordings\nLearn new concepts from program instructors & guest lecturers"
  },
  {
    "objectID": "program/program_resources/session_recordings/recorded_discussions/modeling_strengths_and_limitations.html",
    "href": "program/program_resources/session_recordings/recorded_discussions/modeling_strengths_and_limitations.html",
    "title": "Strengths & Limitations of Modeling",
    "section": "",
    "text": "Back to Recorded Discussions\nModeling is a useful tool for many research questions; however, it is limited in what it can do and how outputs should be interpreted. In this session we’ll discuss common strengths and limitations and how we can be cognizant of this in our own work"
  },
  {
    "objectID": "program/program_resources/session_recordings/recorded_lectures/program_introduction.html",
    "href": "program/program_resources/session_recordings/recorded_lectures/program_introduction.html",
    "title": "Program Introduction",
    "section": "",
    "text": "Back to Recorded Lectures\nMeet the members of the Northwestern Malaria Modeling team who will lead the program and other participants.\n\nGet to know instructional staff and other participants involved in the program\n\nDiscuss the program curriculum, handbook, and NU team slack\n\nLecture Slides\nRecorded Presentation"
  },
  {
    "objectID": "program/program_resources/session_recordings/recorded_tutorials/tutorial_EMODTask.html",
    "href": "program/program_resources/session_recordings/recorded_tutorials/tutorial_EMODTask.html",
    "title": "EMOD Walkthrough & Simple Run",
    "section": "",
    "text": "Back to Recorded Tutorials\nIn this session, we walk through the basic parts of a simple EMOD run script. EMODTask controls the basic building of simulations so is necessary for running EMOD."
  },
  {
    "objectID": "program/program_resources/session_recordings/recorded_tutorials/tutorial_EMOD_inputs.html",
    "href": "program/program_resources/session_recordings/recorded_tutorials/tutorial_EMOD_inputs.html",
    "title": "EMOD Inputs",
    "section": "",
    "text": "Back to Recorded Tutorials\nDemographics, climate, and configuration files."
  },
  {
    "objectID": "program/program_resources/session_recordings.html",
    "href": "program/program_resources/session_recordings.html",
    "title": "Session Recordings",
    "section": "",
    "text": "Recorded lectures, tutorials, and discussions\n\n\n\n\n\n\n\n\n\n\n\nLectures\n\n\n\n\n\n\n\n\n\n\n\n\n\nTutorials\n\n\n\n\n\n\n\n\n\n\n\n\n\nDiscussions\n\n\n\n\n\n\n\n\n\n\nNo matching items",
    "crumbs": [
      "2023 Program",
      "Session Recordings"
    ]
  },
  {
    "objectID": "resources.html",
    "href": "resources.html",
    "title": "Resources",
    "section": "",
    "text": "Choose Category\n\n\n\n\n\n\n\n\n\n\n\nEMOD Papers\n\n\n\n\n\n\n\n\n\n\n\n\n\nCoding Resources\n\n\n\n\n\n\n\n\n\n\n\n\n\nData Sources\n\n\n\n\n\n\n\n\n\n\n\n\n\nScience Communication\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "guides/simulation_guide_pages/adding_malaria.html",
    "href": "guides/simulation_guide_pages/adding_malaria.html",
    "title": "Adding Malaria Transmission",
    "section": "",
    "text": "There are three primary ways to add malaria into a simulation. Ways #1 and 2 are used for idealized situations while #3 is the standard method to use when modeling a specific geography."
  },
  {
    "objectID": "guides/simulation_guide_pages/adding_malaria.html#outbreaks",
    "href": "guides/simulation_guide_pages/adding_malaria.html#outbreaks",
    "title": "Adding Malaria Transmission",
    "section": "1. Outbreaks",
    "text": "1. Outbreaks\nForce a given fraction (demographic_coverage) of the simulated population to experience a new infection on a specified date or dates with an add_outbreak_individual() campaign.\nThis example infects 5% of the population every year for 5 years, beginning on day 0:\n\nfrom emodpy_malaria.interventions.outbreak import add_outbreak_individual\nimport emod_api.campaign as campaign\n\ndef add_outbreak_individual(campaign,\n                            start_day = 0,\n                            demographic_coverage = 0.05,\n                            repetitions = 5,\n                            timesteps_between_repetitions = 365\n                   )\n\nAdditional targeting of the outbreak can be added with parameters described here"
  },
  {
    "objectID": "guides/simulation_guide_pages/adding_malaria.html#forced-eir",
    "href": "guides/simulation_guide_pages/adding_malaria.html#forced-eir",
    "title": "Adding Malaria Transmission",
    "section": "2. Forced EIR",
    "text": "2. Forced EIR\nFor simulations without mosquitoes, a forced EIR campaign can be used to impose infectious bites. EIR timeseries data are typically recreated from previous literature sources that provide monthly EIR levels, input here as a monthly_site_EIR_annualized list. The add_scheduled_input_eir() function is called and given the calculated monthly EIR (the annual values divided by 12) to apply to the simulations. You may also choose to use daily values if you interpolate from monthly using the daily_eir argument instead of monthly_eir. The EIR can be scaled up or down using a scaling_factor to apply the same change to all EIR timepoints, in this example we scale the EIR to be 75% of the input values. Additionally, EIR can be setup to be age-dependent with age_dependence set to “OFF”, “LINEAR”, or “SURFACE_AREA_DEPENDENT”.\n\nfrom emodpy_malaria.interventions.inputeir import add_scheduled_input_eir\nimport emod_api.campaign as campaign\n\nmonthly_site_EIR_annualized = [15.99, 5.41, 2.23, 10.33, 7.44, 11.77, 79.40, 85.80, 118.59, 82.97, 46.62, 33.49]\nmonthly_EIR = [x/12 for x in site_EIR_annualized]\nEIR_scale_factor = 0.75\nadd_scheduled_input_eir(campaign=campaign, start_day=1, monthly_eir=monthly_EIR,\n                            age_dependence=\"SURFACE_AREA_DEPENDENT\",\n                            scaling_factor=EIR_scale_factor)\n\nAdditional information on this “intervention” is available in the related emodpy_malaria documentation."
  },
  {
    "objectID": "guides/simulation_guide_pages/adding_malaria.html#setting-initial-prevalence",
    "href": "guides/simulation_guide_pages/adding_malaria.html#setting-initial-prevalence",
    "title": "Adding Malaria Transmission",
    "section": "3. Setting initial prevalence",
    "text": "3. Setting initial prevalence\nInitial prevalence is set in the demographics file, in the ['Defaults']['IndividualAttributes'] block. See documentation on the demographics file for more information.\nIt can be set simply, as in the demographics example, or you can also add a initial prevalence value draw from a uniform distribution if desired. In this example, the value is pulled in a uniform draw from 0.1 to 0.2. Setting-specific mosquitoes should also be added to the simulation to maintain transmission in the population using the vector configuration how tos.\n\nimport emodpy_malaria.demographics.MalariaDemographics as Demographics\n\ndef build_demog():\n  \n    demog = Demographics.from_template_node(lat=1.00, lon=1.00, pop=1000, name=\"Example_Site_Name\", forced_id=1)\n    demog.SetInitPrevFromUniformDraw(min_init_prev=0.1, max_init_prev=0.2, description=\"prevalence_draw_example\" )\n    \n    return demog"
  },
  {
    "objectID": "guides/simulation_guide_pages/simulation_components.html",
    "href": "guides/simulation_guide_pages/simulation_components.html",
    "title": "Experiment Workflow",
    "section": "",
    "text": "EMOD configuration scripts contain five primary components: 1. Import modules - Import all necessary modules and functions to run subsequent script 2. Config setup & simulation duration - Set config.json parameters to team defaults and update additional parameters as needed using a callback to the emod-api config. For example, one can specify different simulation types such as MALARIA_SIM or VECTOR_SIM to simulate just the vector model without the malaria within-host model, or other simulation types listed here.\n      ::: {#0fbfbd7b .cell}\n      ``` {.python .cell-code}\n      def set_param_fn(config):\n          import emodpy_malaria.malaria_config as conf\n          config = conf.set_team_defaults(config, manifest)\n          \n          #if desired, set simulation type, default MALARIA_SIM below\n          config.parameters.Simulation_Type = \"MALARIA_SIM\"\n          return config\n      ```\n      :::\n      \n      \n3. Campaign setup\n    - Build a campaign file using the `emod-api` schema. This is where desired interventions should be added.\n\n\n      ::: {#b47037bf .cell}\n      ``` {.python .cell-code}\n      def build_camp():\n          camp.schema_path = manifest.schema_file\n          return camp\n      ```\n      :::\n      \n      \n4. Demographics\n    - Build a demographics file using `emod-api`. This is typically done through [`from_template_node`](https://github.com/numalariamodeling/emodpy-malaria/blob/main/emodpy_malaria/demographics/MalariaDemographics.py) for single node sims, but there are other methods available if needed ([*see demographics how to*](https://numalariamodeling.github.io/FE-2023-quarto-website/guides/demographics_guide.html))\n\n\n      ::: {#9652ee7f .cell}\n      ``` {.python .cell-code}\n      def build_demog():\n          demog = Demographics.from_template_node(lat=1, lon=2, pop=10, name=\"Example_Site\")\n          return demog\n      ```\n      :::\n      \n      \n5. EMODTask & experiment builder\n    - Set the platform with details for where we will run the simulations and create the `EMODTask` that that references the above builders, schema, and model executable\n    - Reporters can be added after the task to monitor simulation outputs (*see reporters section below*)\n    - The experiment can be built using `from_task` or `from_builder` depending on simulation complexity. When changes, such as with sweeps, are made outside of the initial campaign builder then `from_builder` is needed (*see model builder section below*)\n\n\n      ::: {#c9d9beb2 .cell}\n      ``` {.python .cell-code}\n      def general_sim(selected_platform):\n          # Set platform and associated values, such as the maximum number of jobs to run at one time and other platform specifics\n          platform = Platform(&lt;platform&gt;, job_directory=manifest.job_directory,\n                              partition=&lt;SLURM partition&gt;, time=&lt;'HH:MM:SS'&gt;,\n                              account=&lt;SLURM account&gt;, modules=['singularity'],\n                              max_running_jobs=10)\n          # create EMODTask using previously defined builders\n          print(\"Creating EMODTask (from files)...\")\n          task = EMODTask.from_default2(\n                    config_path=\"config.json\",\n                    eradication_path=manifest.eradication_path,\n                    campaign_builder=build_camp,\n                    schema_path=manifest.schema_file,\n                    param_custom_cb=set_param_fn,\n                    ep4_custom_cb=None,\n                    demog_builder=build_demog,\n                    plugin_report=None\n                    )\n          \n          # set the singularity image to be used when running this experiment\n          task.set_sif(manifest.SIF_PATH, platform)\n          \n          # create experiment from builder\n          user = os.getlogin()\n          experiment = Experiment.from_task(task, name= 'experiment_name')\n          # The last step is to call run() on the ExperimentManager to run the simulations.\n          experiment.run(wait_until_done=True, platform=platform)\n      ```\n      :::"
  },
  {
    "objectID": "guides/simulation_guide_pages/simulation_components.html#create-a-model",
    "href": "guides/simulation_guide_pages/simulation_components.html#create-a-model",
    "title": "Experiment Workflow",
    "section": "",
    "text": "EMOD configuration scripts contain five primary components: 1. Import modules - Import all necessary modules and functions to run subsequent script 2. Config setup & simulation duration - Set config.json parameters to team defaults and update additional parameters as needed using a callback to the emod-api config. For example, one can specify different simulation types such as MALARIA_SIM or VECTOR_SIM to simulate just the vector model without the malaria within-host model, or other simulation types listed here.\n      ::: {#0fbfbd7b .cell}\n      ``` {.python .cell-code}\n      def set_param_fn(config):\n          import emodpy_malaria.malaria_config as conf\n          config = conf.set_team_defaults(config, manifest)\n          \n          #if desired, set simulation type, default MALARIA_SIM below\n          config.parameters.Simulation_Type = \"MALARIA_SIM\"\n          return config\n      ```\n      :::\n      \n      \n3. Campaign setup\n    - Build a campaign file using the `emod-api` schema. This is where desired interventions should be added.\n\n\n      ::: {#b47037bf .cell}\n      ``` {.python .cell-code}\n      def build_camp():\n          camp.schema_path = manifest.schema_file\n          return camp\n      ```\n      :::\n      \n      \n4. Demographics\n    - Build a demographics file using `emod-api`. This is typically done through [`from_template_node`](https://github.com/numalariamodeling/emodpy-malaria/blob/main/emodpy_malaria/demographics/MalariaDemographics.py) for single node sims, but there are other methods available if needed ([*see demographics how to*](https://numalariamodeling.github.io/FE-2023-quarto-website/guides/demographics_guide.html))\n\n\n      ::: {#9652ee7f .cell}\n      ``` {.python .cell-code}\n      def build_demog():\n          demog = Demographics.from_template_node(lat=1, lon=2, pop=10, name=\"Example_Site\")\n          return demog\n      ```\n      :::\n      \n      \n5. EMODTask & experiment builder\n    - Set the platform with details for where we will run the simulations and create the `EMODTask` that that references the above builders, schema, and model executable\n    - Reporters can be added after the task to monitor simulation outputs (*see reporters section below*)\n    - The experiment can be built using `from_task` or `from_builder` depending on simulation complexity. When changes, such as with sweeps, are made outside of the initial campaign builder then `from_builder` is needed (*see model builder section below*)\n\n\n      ::: {#c9d9beb2 .cell}\n      ``` {.python .cell-code}\n      def general_sim(selected_platform):\n          # Set platform and associated values, such as the maximum number of jobs to run at one time and other platform specifics\n          platform = Platform(&lt;platform&gt;, job_directory=manifest.job_directory,\n                              partition=&lt;SLURM partition&gt;, time=&lt;'HH:MM:SS'&gt;,\n                              account=&lt;SLURM account&gt;, modules=['singularity'],\n                              max_running_jobs=10)\n          # create EMODTask using previously defined builders\n          print(\"Creating EMODTask (from files)...\")\n          task = EMODTask.from_default2(\n                    config_path=\"config.json\",\n                    eradication_path=manifest.eradication_path,\n                    campaign_builder=build_camp,\n                    schema_path=manifest.schema_file,\n                    param_custom_cb=set_param_fn,\n                    ep4_custom_cb=None,\n                    demog_builder=build_demog,\n                    plugin_report=None\n                    )\n          \n          # set the singularity image to be used when running this experiment\n          task.set_sif(manifest.SIF_PATH, platform)\n          \n          # create experiment from builder\n          user = os.getlogin()\n          experiment = Experiment.from_task(task, name= 'experiment_name')\n          # The last step is to call run() on the ExperimentManager to run the simulations.\n          experiment.run(wait_until_done=True, platform=platform)\n      ```\n      :::"
  },
  {
    "objectID": "guides/diagnostic_guide.html",
    "href": "guides/diagnostic_guide.html",
    "title": "Diagnostic Guides",
    "section": "",
    "text": "Types of configurable tests to detect malaria in EMOD.\n\n\n\n\n\n\n\n\n\n\n\nBlood Smear Microscopy\n\n\n\n\n\n\n\n\n\n\n\n\n\nHRP2-Based Rapid Test\n\n\n\n\n\n\n\n\n\n\n\n\n\nPCR\n\n\n\n\n\n\n\n\n\n\n\n\n\nFever\n\n\n\n\n\n\n\n\n\n\n\n\n\nDiagnostic Survey Intervention\n\n\n\n\n\n\n\n\n\n\nNo matching items",
    "crumbs": [
      "EMOD How-To Guides",
      "Diagnostic Guides"
    ]
  },
  {
    "objectID": "guides/intervention_guide_pages/vector_control_pages/bednets.html",
    "href": "guides/intervention_guide_pages/vector_control_pages/bednets.html",
    "title": "Bednets",
    "section": "",
    "text": "ITNs with different usage patterns"
  },
  {
    "objectID": "guides/intervention_guide_pages/vector_control_pages/bednets.html#constant-usage",
    "href": "guides/intervention_guide_pages/vector_control_pages/bednets.html#constant-usage",
    "title": "Bednets",
    "section": "Constant Usage",
    "text": "Constant Usage"
  },
  {
    "objectID": "guides/intervention_guide_pages/vector_control_pages/bednets.html#seasonalleaky-usage",
    "href": "guides/intervention_guide_pages/vector_control_pages/bednets.html#seasonalleaky-usage",
    "title": "Bednets",
    "section": "Seasonal/Leaky Usage",
    "text": "Seasonal/Leaky Usage"
  },
  {
    "objectID": "guides/intervention_guide_pages/vector_control_pages/larvicides.html",
    "href": "guides/intervention_guide_pages/vector_control_pages/larvicides.html",
    "title": "Larvicides",
    "section": "",
    "text": "Larvicides\n\nLarvicides"
  },
  {
    "objectID": "guides/intervention_guide_pages/drug_based.html",
    "href": "guides/intervention_guide_pages/drug_based.html",
    "title": "Drug-Based",
    "section": "",
    "text": "Interventions centered on administration of antimalarial drugs\n\n\n\n\n\n\n\n\n\n\n\nTreatment-Seeking\n\n\n\n\n\n\n\n\n\n\n\n\n\nDrug Campaigns\n\n\n\n\n\n\n\n\n\n\n\n\n\nTriggered Campaigns\n\n\n\n\n\n\n\n\n\n\n\n\n\nChange Drug Adherence\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "guides/intervention_guide_pages/drug_based_pages/treatment_seeking.html",
    "href": "guides/intervention_guide_pages/drug_based_pages/treatment_seeking.html",
    "title": "Treatment-Seeking",
    "section": "",
    "text": "Management of symptomatic cases\n\nCase Management/Treatment-Seeking\nCase management is controlled in EMOD by an add_treatment_seeking() function within emodpy-malaria. This function is a node level intervention that allows you to target individuals on the node for malaria treatment through treatment seeking behavior.\nIn this example, treatment is triggered by new cases and codes for differences in case management coverage between individuals of age 0-5 yrs and 5-100yrs as set by the two trigger dictionaries’ respective agemin and agemax. Importantly, we distinguish between NewClinicalCase and NewSevereCase to provide slightly different case management for uncomplicated and severe cases. In the example below, the main differences for these types of case management are seen in coverage level and the rate of receiving treatment after seeking care, rate. This rate is used to create an exponential distribution of the delay period. We usually set rate = 1/3 for clinical cases and rate = 1/2. for severe cases.\nThe seek argument dictates the proportion of people who will seek care with a new clinical case - it is usually set to 1 such that coverage is the true case management coverage level.\nYou can also specify which drugs are used for case management. The default is Artemether-Lumefantrine with age-based dosing. Pre-configured drugs can be viewed in the emodpy-malaria repositry here.\nAdditional parameters can be added to restrict case management to certain nodes, node properties, or individual properties. See here for more information.\n\nimport emod_api.campaign as camp\nimport emodpy_malaria.interventions.treatment_seeking as cm\n\ncm.add_treatment_seeking(camp, start_day=0, drug=['Artemether', 'Lumefantrine'],\n                         targets=[{'trigger': 'NewClinicalCase', \n                                   'coverage': 0.7, 'agemin': 0, 'agemax': 5,\n                                   'seek': 1,'rate': 0.3},\n                                 {'trigger': 'NewClinicalCase', \n                                  'coverage': 0.5, 'agemin': 5, 'agemax': 100,\n                                  'seek': 1,'rate': 0.3},\n                                 {'trigger': 'NewSevereCase', \n                                  'coverage': 0.85, 'agemin': 0, 'agemax': 100,\n                                  'seek': 1,'rate': 0.5}],\n                         broadcast_event_name=\"Received_Treatment\")"
  },
  {
    "objectID": "guides/intervention_guide_pages/drug_based_pages/drug_campaigns.html",
    "href": "guides/intervention_guide_pages/drug_based_pages/drug_campaigns.html",
    "title": "Drug Campaigns",
    "section": "",
    "text": "Population-wide programmatic treatment campaigns\n\nDrug Campaigns\nUsing add_drug_campaign() you can set different drug campaign_types including MDA, MSAT, SMC, fMDA, MTAT, rfMSAT, and rfMDA. This function also includes the ability to set coverage levels, repetitions (such as SMC cycles) and the timesteps between them, diagnostics information for campaigns that include testing, target groups, and restrictions on who can receive drugs by node or individual properties. Node and individual properties are set in the demographics file and can be called upon here for things like low vs high access groups, example here.\nFor more details on all of the campaign types and other options, checkout the emodpy-malaria documentation\n\nSeasonal/Perennial Malaria Chemoprophylaxis (SMC/PMC)\nThis example details an SMC intervention. Timesteps between repetitions (if more than one cycle given) is set to 30 days as SMC is given on a monthly basis during peak season. The target group is also specified here to limit the age group to 0.25-5 year old children. This example uses adherent drug configurations as shown in the change drug adherence example.\n\nimport emod_api.campaign as campaign\nimport emodpy_malaria.interventions.drug_campaign as drug_campaign\n\ndrug_campaign.add_drug_campaign(campaign, \n                                campaign_type=\"SMC\", \n                                start_days=[165], \n                                drug_code=\"SPA\", #single code if not using adherent drug\n                                #adherent_drug_configs=[adherent_drug], #use adherent drug from adherent drug how to\n                                repetitions=4, \n                                tsteps_btwn_repetitions=30, \n                                coverage=0.7,\n                                target_group={'agemin': 0.25, 'agemax': 5},\n                                receiving_drugs_event_name=\"Received_SMC\")                       \n\n\n\nMass Drug Administration (MDA)\n\n\nMass Screening/Testing and Treatment (MSAT/MTAT)"
  },
  {
    "objectID": "guides/vector_guide_pages/vector_genetics.html",
    "href": "guides/vector_guide_pages/vector_genetics.html",
    "title": "Add Vector Genetics",
    "section": "",
    "text": "Including vector genetics may be useful for some research questions, such as those including information on insecticide resistance.\n\nAdd basic vector genetics\n\nfrom emodpy_malaria import vector_config as vector_config\nconfig.parameters.Simulation_Type = \"VECTOR_SIM\"\nvector_config.set_team_defaults(config, manifest)  # team defaults\nvector_config.add_species(config, manifest, [\"gambiae\", \"funestus\"])\n\nvector_config.add_genes_and_alleles(config, manifest, \"gambiae\", \n                                  [(\"a\", 0.85), (\"b\", 0.1), (\"c\", 0.05)])\n                                  \nvector_config.add_mutation(config, manifest, \"gambiae\", \n                                    mutate_from=\"a\", mutate_to=\"b\", probability=0.05)\nvector_config.add_mutation(config, manifest, \"gambiae\", \n                                    mutate_from=\"b\", mutate_to=\"c\", probability=0.1)\nvector_config.add_mutation(config, manifest, \"gambiae\", \n                                    mutate_from=\"c\", mutate_to=\"a\", probability=0.1)\nvector_config.add_mutation(config, manifest, \"gambiae\", \n                                    mutate_from=\"a\", mutate_to=\"c\", probability=0.03)\n\nAdditional details on setting up vector genetics are included in the documentaiton.\nReporting on vector genetics (abundance of alleles and/or genotypes) is requested like so, with additional parameters availabe:\n\nfrom emodpy_malaria.reporters.builtin import *\nadd_report_vector_genetics(task, manifest, species = 'gambiae',\n                            gender = 'VECTOR_FEMALE',\n                            include_vector_state = False,\n                            stratify_by = 'ALLELE_FREQ')\n\n\n\nRelate genotype to phenotype\nThe Insecticides config param is a list of dictionaries, one per insecticide. For each insecticide, genotype-specific modifications of killing, blocking, repelling, and larval killing can be set and resistance can be added using add_insecticide_resistance(). In this example, all A. gambiae vectors with an allele combination of “bb” will be completely resistant to pyrethroid.\n\nfrom emodpy_malaria import vector_config as vector_config\nvector_config.add_insecticide_resistance(config, manifest, \"pyrethroid\", \"gambiae\", \n                                          allele_combo=[[\"b\", \"b\"]],\n                                          blocking=0.0, \n                                          killing=0.0,\n                                          repelling=0.0,\n                                          larval_killing=0.0)"
  },
  {
    "objectID": "guides/report_guide.html",
    "href": "guides/report_guide.html",
    "title": "Report Guides",
    "section": "",
    "text": "Reporting simulation data to output files\n\n\n\n\n\n\n\n\n\n\n\nInsetChart\n\n\n\n\n\n\n\n\n\n\n\n\n\nMalariaSummaryReport\n\n\n\n\n\n\n\n\n\n\n\n\n\nEvent Reports\n\n\n\n\n\n\n\n\n\n\n\n\n\nSpatial Reports\n\n\n\n\n\n\n\n\n\n\nNo matching items",
    "crumbs": [
      "EMOD How-To Guides",
      "Report Guides"
    ]
  },
  {
    "objectID": "guides/report_guide_pages/InsetChart.html",
    "href": "guides/report_guide_pages/InsetChart.html",
    "title": "InsetChart",
    "section": "",
    "text": "The inset chart (InsetChart.json) is an output report that is automatically generated with every simulation. It contains simulation-wide averages, one per time step, for a wide number of data channels. This default reporter is an easy way to check if your simulation is doing the basics of what you expect by plotting the outputs of the included channels. It may be particularly helpful to examine channels like Statistical Population, True Prevalence, New Clinical Cases, and Adult Vectors or Daily EIR depending on how transmission is defined in your simulations.\nIf you do not want to include InsetChart outputs in your simulations, you can remove it by setting the config parameter Enable_Default_Reporting to 0. We often disable this report once we are conident in our simulation setup or for particularly long simulations where the report will be extremely large."
  },
  {
    "objectID": "guides/report_guide_pages/MalariaSummaryReport.html",
    "href": "guides/report_guide_pages/MalariaSummaryReport.html",
    "title": "MalariaSummaryReport",
    "section": "",
    "text": "The MalariaSummaryReport is a useful output that reports infection data (prevalence, clinical incidence, parasitemia, infectivity) by age group and aggregated over a user-defined time interval such as years or months.\nIn this example, simulation data is reported starting at day 365 and ending at day 1825 (the end of a simulation with a duration of 5 years), with a monthly aggregation, in 3 age bins (0 - 0.25, 0.25 - 5, and 5 - 115 years), as called by add_malaria_summary_report(). The report name will also include a suffix of “monthly_report” to keep separate multiple summary reports with different outputs, such as monthly vs annual or including different IPs. Check out the documentation for more information on parameters that can be changed to customize this report, such as infectiousness bins.\n\nfrom emodpy_malaria.reporters.builtin import *\n\nsim_years=5\n\nadd_malaria_summary_report(task, manifest, start_day=365, end_day=sim_years*365, \n                               reporting_interval=30,\n                               age_bins=[0.25, 5, 115],\n                               max_number_reports=20,\n                               filename_suffix=\"monthly\",\n                               pretty_format=True)"
  },
  {
    "objectID": "guides/demographics_guide_pages/multinode_demographics.html",
    "href": "guides/demographics_guide_pages/multinode_demographics.html",
    "title": "Multi-Node Demographics",
    "section": "",
    "text": "To run simultaneous simulations in multiple nodes, create an input file “my_nodes.csv” with one row for each node.\nEx. “my_nodes.csv”\n\n\n\nnodeid\nlat\nlon\npopulation\n\n\n\n\n1\n12.11\n-1.47\n1000\n\n\n2\n12.03\n-1.44\n1000\n\n\n3\n12.13\n-1.59\n1000\n\n\n17\n12.06\n-1.48\n1000\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nNode IDs must be positive whole numbers, but do not have to be sequential\nlat/lon values should represent real places with climates suitable for malaria transmission (if weather files are generated from demographics)\n\n\n\nThen, you can generate demographics for each node in every simulation, by adding this code to build_demog()\ndef build_demog():\n    \"\"\"\n    This function builds a demographics input file for the DTK using emod_api.\n    \"\"\"\n    \n    # From template node #\n    ######################\n    # This snippet allows you to manually specify the node details instead of using a .csv\n#    demog = Demographics.from_template_node(lat=1, lon=2, pop=1000, name=\"Example_Site\")\n\n    # From input file csv #\n    #######################\n    demog = Demographics.from_csv(input_file = os.path.join(&lt;path_to_file&gt;,\"my_nodes.csv\"),\n                                  id_ref='spatial_example', \n                                  init_prev = 0.01, \n                                  include_biting_heterogeneity = True)\n    \n    demog.SetEquilibriumVitalDynamics()\n    age_distribution = Distributions.AgeDistribution_SSAfrica\n    demog.SetAgeDistribution(age_distribution)\n\n    return demog"
  },
  {
    "objectID": "guides/demographics_guide_pages/multinode_demographics.html#ongoing-migration",
    "href": "guides/demographics_guide_pages/multinode_demographics.html#ongoing-migration",
    "title": "Multi-Node Demographics",
    "section": "Ongoing Migration",
    "text": "Ongoing Migration\n\nHuman Migration Example\n\n\nVector Migration Example"
  },
  {
    "objectID": "guides/demographics_guide_pages/multinode_demographics.html#forced-migration",
    "href": "guides/demographics_guide_pages/multinode_demographics.html#forced-migration",
    "title": "Multi-Node Demographics",
    "section": "Forced Migration",
    "text": "Forced Migration\n\nA Single Migration Event\n\n\nPeriodic Migration\n\n\nPermanent Moves"
  },
  {
    "objectID": "guides/intervention_guide.html",
    "href": "guides/intervention_guide.html",
    "title": "Intervention Guides",
    "section": "",
    "text": "All about interventions and campaigns in EMODpy.\n\n\n\n\n\n\n\n\n\n\n\nDrug-Based\n\n\n\n\n\n\n\n\n\n\n\n\n\nVector Control\n\n\n\n\n\n\n\n\n\n\n\n\n\nVaccination\n\n\n\n\n\n\n\n\n\n\nNo matching items",
    "crumbs": [
      "EMOD How-To Guides",
      "Intervention Guides"
    ]
  },
  {
    "objectID": "guides/diagnostic_guide_pages/diagnostic_survey.html",
    "href": "guides/diagnostic_guide_pages/diagnostic_survey.html",
    "title": "Diagnostic Survey Intervention",
    "section": "",
    "text": "Diagnostic surveys are useful interventions for triggering events based on an individual’s diagnosis. Testing can be performed at regular intervals (tsteps_between_repetitions) for a set number of repetitions based on target groups and coverage. Testing can also be triggered by other events, such as receiving a particular dose of perennial malaria chemoprevention (PMC) in this example.\nDifferent methods of diagnostic testing may also be utilized, including TRUE_PARASITE_DENSITY, BLOOD_SMEAR, PCR, PF_HRP2, TRUE_INFECTION_STATUS, and HAS_FEVER. Diagnostic threshold, sensitivity, and specificity can all be parameterized. Once a positive or negative result is obtained in the simulation, the relative configs parameter dictates what will happen to that individual. In this example, either diagnosis broadcasts an event for that individual that they were positive or negative on the day that they received their first dose of PMC.\n\nimport emod_api.campaign as campaign\nimport emodpy_malaria.interventions.diag_survey as diagnostic_survey\nimport emod_api.interventions.common\n\nparasites_detected = emod_api.interventions.common.BroadcastEvent(campaign, Event_Trigger=\"Day_0_positive\")\nno_parasites_detected = emod_api.interventions.common.BroadcastEvent(campaign, Event_Trigger=\"Day_0_negative\")\n\ndiagnostic_survey.add_diagnostic_survey(campaign=campaign, start_day=0, \n                                        diagnostic_type=\"TRUE_PARASITE_DENSITY\",\n                                        diagnostic_threshold=20,\n                                        trigger_condition_list=['Received_PMC_1'],\n                                        positive_diagnosis_configs=[parasites_detected],\n                                        negative_diagnosis_configs=[no_parasites_detectedc])\n\nAdditional targeting and configuration parameters are described here"
  },
  {
    "objectID": "guides/analyzer_guide_pages/event_analyzer.html",
    "href": "guides/analyzer_guide_pages/event_analyzer.html",
    "title": "Event Analysis",
    "section": "",
    "text": "Analyze ReportEventCounter\nThe ReportEventCounter, InsetChart, and ReportMalariaFiltered json outputs all have very similar structure, so an analyzer written for one of these output types can usually be easily adapted for another.\nIn the example below, the InsetChart.json is read in addition to ReportEventCounter.json to obtain not only number of individuals who received and intervention but also the total population per timestep in the simulation. Data from both output files are combined into the same dataframe.\n\nclass ReceivedCampaignAnalyzer(IAnalyzer):\n    def __init__(self, expt_name, channels=None, sweep_variables=None, working_dir='./', start_year=2022):\n        super(ReceivedCampaignAnalyzer, self).__init__(working_dir=working_dir,\n                              filenames=[\"output/ReportEventCounter.json\",\n                                         \"output/InsetChart.json\"])\n        self.sweep_variables = sweep_variables or [\"Run_Number\"]\n        self.channels = channels or ['Received_Treatment']\n        self.start_year = start_year\n        self.expt_name = expt_name\n        \n    def map(self, data, simulation):\n        simdata = pd.DataFrame({x: data[self.filenames[0]]['Channels'][x]['Data'] for x in self.channels})\n        simdata['Population'] = data[self.filenames[1]]['Channels']['Statistical Population']['Data']\n        simdata['Time'] = simdata.index\n        simdata['Day'] = simdata['Time'] % 365\n        simdata['Month'] = simdata['Day'].apply(lambda x: self.monthparser((x + 1) % 365))\n        simdata['Year'] = simdata['Time'].apply(lambda x: int(x / 365) + self.start_year)\n        for sweep_var in self.sweep_variables:\n            if sweep_var in simulation.tags.keys():\n                 simdata[sweep_var] = simulation.tags[sweep_var]\n        return simdata"
  },
  {
    "objectID": "guides/analyzer_guide_pages/MalariaSummaryReport_analyzer.html",
    "href": "guides/analyzer_guide_pages/MalariaSummaryReport_analyzer.html",
    "title": "By Time and Age Bin",
    "section": "",
    "text": "Analyze MalariaSummaryReport\nThe summary report aggregates the monitored simulation outputs into user-specified agebins, monitoring intervals, and/or parasitemia bins. Outputs such as prevalence by age, incidence by age, and parasite density by age can be obtained through the summary report. Multiple summary reports can be requested in the simulation run script, and analyzers can be built to handle working with multiple summary reports.\n\nclass AnnualAgebinPfPRAnalyzer(IAnalyzer):\n    def __init__(self, expt_name, sweep_variables=None, working_dir='./', start_year=2022,\n                 end_year=2025, burnin=None):\n        super(AnnualAgebinPfPRAnalyzer, self).__init__(working_dir=working_dir,\n                              filenames=[\"output/MalariaSummaryReport_Annual_Agebin.json\"])\n\nDocumentation on the summary report is here. If you are writing a new summary report analyzer, you will need to know which part of the summary report contains the data you need.\nWithin each summary report the channel DataByTimeAndAgeBins reports monitored outputs per time and age it therefore needs to be indexed twice, one for selecting time range and one for selecting agebin. The outer list is time and the inner list is age.\nIn this example, the data of interest is in DataByTimeAndAgeBins: we extract, for each age group, annually-aggregated PfPR, clinical incidence, severe incidence, and population. All outcomes are combined into a dataframe for each age group, then the age-specific dataframes are concatenated into a single dataframe.\nAttaching the sweep variable for the respective simulation is done the same way across analyzers.\n\n    def map(self, data, simulation):\n        adf = pd.DataFrame()\n        nyears = (self.end_year - self.start_year)\n        age_bins = data[self.filenames[0]]['Metadata']['Age Bins']\n        d = data[self.filenames[0]]['DataByTimeAndAgeBins']\n        for age in range(len(age_bins)):\n            pfpr = [x[age] for x in d['PfPR by Age Bin'][:nyears]]\n            clinical_cases = [x[age] for x in d['Annual Clinical Incidence by Age Bin'][:nyears]]\n            severe_cases = [x[age] for x in d['Annual Severe Incidence by Age Bin'][:nyears]]\n            pop = [x[age] for x in d['Average Population by Age Bin'][:nyears]]\n            simdata = pd.DataFrame({'year': range(self.start_year, self.end_year),\n                                    'PfPR': pfpr,\n                                    'Cases': clinical_cases,\n                                    'Severe cases': severe_cases,\n                                    'Pop': pop})\n            simdata['agebin'] = age_bins[age]\n            adf = pd.concat([adf, simdata])\n        for sweep_var in self.sweep_variables:\n            if sweep_var in simulation.tags.keys():\n                 adf[sweep_var] = simulation.tags[sweep_var]\n        return adf"
  },
  {
    "objectID": "guides/climate_guide_pages/get_climate_files.html",
    "href": "guides/climate_guide_pages/get_climate_files.html",
    "title": "Get Climate",
    "section": "",
    "text": "Request weather files from the climate API"
  },
  {
    "objectID": "guides/climate_guide_pages/get_climate_files.html#create-climate-files",
    "href": "guides/climate_guide_pages/get_climate_files.html#create-climate-files",
    "title": "Get Climate",
    "section": "Create climate files",
    "text": "Create climate files\nOnce we have generated a demographics file describing the nodes for a simulation, we can request and download weather files using the idmtools API for COMPS SSMT. The simplest way to do this is to provide your script with a csv containing the basics of the site request, including site name, latitude, longitude, and node ID, such as in the “example_site.csv” here:\n\n\n\nname\nlat\nlon\nnodes\n\n\n\n\nexample_site\n1.00\n1.00\n1\n\n\n\nThis csv is passed as the site_file to emodpy-malaria's generate_weather() function along with the node_column that provides the name of our node ID column in the csv and local_dir which specifies that output directory. From there we can also specify things like: - platform: where the request work item will run (Calculon if associated with IDM) - start_date and end_dates: identify the period of time we are interested in requesting weather for - id_reference: specify the IDReference attribute for the weather metadata - force: flag ensuring that a new request is submitted even if the files exist in the local_dir\n\nimport tempfile\nfrom pathlib import Path\nfrom emodpy_malaria.weather import generate_weather\n# ---| Request weather files |---\n# Request weather time series, for nodes listed in a .csv file ('example_site.csv' here)\nwr = generate_weather(platform=\"Calculon\",\n                      site_file=\"./inputs/example_site.csv\",\n                      start_date=2019001, #YYYYddd\n                      end_date=2019365, #YYYYddd\n                      node_column=\"nodes\",\n                      local_dir=\"./inputs/example_weather/\",\n                      id_reference=\"Gridded world grump2.5arcmin\",\n                      force=True)\nprint(\"\\n\".join(wr.files))\n\nAfter completing these steps, there should be climate files for air_temperature, rainfall, and relative_humidity in your inputs folder. To reference these when running a simulation, update the configuration parameters to reflect the name and location of your climate files:\n\ndef set_param_fn(config):\n    import emodpy_malaria.malaria_config as conf\n    config = conf.set_team_defaults(config, manifest)\n    \n    #Add climate files\n    config.parameters.Air_Temperature_Filename = os.path.join('climate','example_air_temperature_daily.bin')\n    config.parameters.Land_Temperature_Filename = os.path.join('climate','example_air_temperature_daily.bin')\n    config.parameters.Rainfall_Filename = os.path.join('climate','example_rainfall_daily.bin')\n    config.parameters.Relative_Humidity_Filename = os.path.join('climate', 'example_relative_humidity_daily.bin')\n    return config\n\nAdditional “getting started” instructions are available in the emodpy-malaria repository, including information on converting weather files to a csv for modification (such as increasing temperature) and then back to a weather file."
  },
  {
    "objectID": "guides/climate_guide.html",
    "href": "guides/climate_guide.html",
    "title": "Climate Guides",
    "section": "",
    "text": "All about weather files used in EMOD.\n\n\n\n\n\n\n\n\n\n\n\nGet Climate\n\n\n\n\n\n\n\n\n\n\n\n\n\nCustomize Climate\n\n\n\n\n\n\n\n\n\n\nNo matching items",
    "crumbs": [
      "EMOD How-To Guides",
      "Climate Guides"
    ]
  },
  {
    "objectID": "guides/properties_guide_pages/report_properties.html",
    "href": "guides/properties_guide_pages/report_properties.html",
    "title": "Using Individual Properties in Reports",
    "section": "",
    "text": "Individual properties can also be used in reporting to limit the report to only those individuals in the specified group, to track the number of individuals with an IP or combination of IPs, or to report the IPs of individuals.\n\nMalaria Summary Report\nFor the MalariaSummaryReport, aggregation can be restricted by IP using the ipfilter argument. For example, the following function will report, on aggregate, every 30 days on new infections and other infection updates in the Placebo group across the three age bins.\n\nfrom emodpy_malaria.reporters.builtin import *\nadd_malaria_summary_report(task, manifest, \n                           start_day=1, \n                           end_day=sim_years*365, \n                           reporting_interval=30,\n                           age_bins=[0.25, 5, 115],\n                           must_have_ip_key_value='StudyCohort:Placebo',\n                           filename_suffix='_placebo',\n                           pretty_format=True)\n\n\n\nProperty Report\nThe PropertyReport outputs select channels (population, infected, new infections, and disease deaths) for all combinations of IPs and IP values. This output can get very large if there are many IPs and/or IP values in play.\nTo request the PropertyReport:\n\n# add to config parameter setup\nconfig.parameters.Enable_Property_Output = 1\n\n\n\nNode Demographics Report\nThe NodeDemographicsReport reports on node-level counts of individuals by age bin, infection status, and IPs if requested through IP_key_to_collect:\n\nfrom emodpy_malaria.reporters.builtin import *\nadd_report_node_demographics(task, manifest, \n                             IP_key_to_collect='StudyCohort')\n\n\n\nReport Event Recorder\nTo add an IP column to ReportEventRecorder that reports the IP value for each individual experiencing the requested events, use ips_to_record:\n\nfrom emodpy_malaria.reporters.builtin import *\nadd_event_recorder(task, event_list=[\"NewClinicalCase\",\"Received_Treatment\"],\n                     start_day=1, end_day=365, node_ids=[1], min_age_years=0,\n                     max_age_years=100,\n                     ips_to_record=['StudyCohort'])"
  },
  {
    "objectID": "guides/properties_guide_pages/demog_properties.html",
    "href": "guides/properties_guide_pages/demog_properties.html",
    "title": "Adding Individual Properties to Demographics",
    "section": "",
    "text": "Individual properties, possible property values, and initial distributions of property values must be specified in the demographics file.\nIn this example we create a study cohort where 50% of individuals are assigned to ‘Placebo’ and the other 50% are assigned to ‘Treatment’ without any transitions between the groups or differences in transmission by group. We add this property set directly to the basic demographics item. This example includes only one property but you can define as many as needed.\n\nimport emodpy_malaria.demographics.MalariaDemographics as Demographics\ndef build_demog():\n\n    demog = Demographics.from_template_node(lat=1, lon=2, pop=1000, name=\"Example_Site\")\n    demog.SetEquilibriumVitalDynamics()\n    \n    age_distribution = Distributions.AgeDistribution_SSAfrica\n    demog.SetAgeDistribution(age_distribution)\n    \n    initial_distribution = [0.5, 0.5]\n    demog.AddIndividualPropertyAndHINT(Property=\"StudyCohort\", Values=[\"Placebo\", \"Treatment\"],\n                                       InitialDistribution=initial_distribution)              \n    return demog"
  },
  {
    "objectID": "guides/analyzer_guide.html",
    "href": "guides/analyzer_guide.html",
    "title": "Analyzer Guides",
    "section": "",
    "text": "Analyze reported outputs from a collection of a simulations.\nMost of EMOD generated output files are in json format, and the remainder are csv’s. In emodpy, Analyzer functions facilitate extracting information from EMOD’s raw output files to produce results in csv’s or as figures.",
    "crumbs": [
      "EMOD How-To Guides",
      "Analyzer Guides"
    ]
  },
  {
    "objectID": "guides/analyzer_guide.html#required-modules",
    "href": "guides/analyzer_guide.html#required-modules",
    "title": "Analyzer Guides",
    "section": "Required modules",
    "text": "Required modules\n\nimport os\nimport pandas as pd\nimport numpy as np\nfrom idmtools.entities import IAnalyzer \nfrom idmtools.entities.simulation import Simulation\nfrom idmtools.analysis.analyze_manager import AnalyzeManager\nfrom idmtools.core import ItemType\nfrom idmtools.core.platform_factory import Platform\n\nOther modules such as datetime may also be helpful, depending on the type of output and desired manipulations.",
    "crumbs": [
      "EMOD How-To Guides",
      "Analyzer Guides"
    ]
  },
  {
    "objectID": "guides/analyzer_guide.html#basic-structure-of-an-analyzer",
    "href": "guides/analyzer_guide.html#basic-structure-of-an-analyzer",
    "title": "Analyzer Guides",
    "section": "Basic structure of an Analyzer",
    "text": "Basic structure of an Analyzer\nThe Analyzer Class should be defined using a meaningful name, i.e. InsetChartAnalyzer for an analyzer that processes InsetChart.json outputs. A class in Python allows constructing custom objects with associated attributes and functions. Each class starts with a definition of custom parameters and objects attributes via __init__ and self. This requires a few edits across simulation experiments but tends to stay relatively unchanged within the same experiment setup.\nThe filter function is optional. It allows the analyzer to only analyze a subset of simulations in an experiment by filtering based on simulation tags. For example, the user can request the analyzer only analyze simulations where the tag SMC_Coverage has the value 1 (if this is a tag the user specified when building their experiment), or simulations that succeeded. This functionality can be useful when debugging large experiments. If the filter function is not specified, then all simulations are targeted for analysis.\nThe map is a custom function applied to extract data from the EMOD output file and needs to be modified the most across different EMOD output file types and according to the user’s needs.\nFinally, the reduce checks the extracted data, aggregates data from multiple simulations in the same experiment, and then saves or plots the data. The checking of the simulation stays mostly the same across simulations while the part of processing the simulation data is highly variable across projects and depends on the desired results.\n\nclass InsetChartAnalyzer(IAnalyzer): ...\n    # 1 - Definition of custom parameters and object attributes\n    def __init__(self, ...)\n    # Optional\n    def filter(self, simulation):\n        ...\n    # 2 - Extract and select data from the json output files\n    def map(self, data, simulation):\n        ...\n    # 3 - Check the extracted data and then save or plot the data\n    def reduce(self, all_data):\n        ...\n\nMore information on the general structure and functioning of analyzers that work with EMOD output sis available in the idmtools documentation\n\nAnalyze InsetChart\nThe InsetChartAnalyzer is used to explain the Analyzer structure in detail.\n\nSetup analyzer class & define variables\nYou don’t need to understand the python fundamentals in depth, just what each line does and what to modify. - The first two lines including the __init__(self,...) and super is required in each analyzer class. Be sure to update the analyzer name in super. - The second line filenames=[\"output/InsetChart.json\"] defines the EMOD output file to be analyzed. It is written in a list so that analyzers have the capability of combining data from multiple files. Generally we use 1 output file per analyzer. - The next lines that start with self attach each argument that the user has passed to the analyzer (expt_name, etc) to the analyzer class via self. This allows easy access to any of these values from any analyzer function via the self object. - This analyzer allows the user to specify the parameters expt_name, sweep_variables , channels, and start_year. Generally we use expt_name and sweep_variables across all analyzers we write, while the others are specific to this particular analyzer. All these requested parameters can be modified or extended with additional parameters if needed, according to the user’s needs. - These parameters allow the analyzer to take in experiment specific values, for instance simulation start_year is used to convert timesteps into date-time values, as we generally run EMOD in simulation time instead of calendar time. - The expt_name parameter lets the user specify the name of the experiment. We often use the experiment name in the file names of outputs from the analyzer, for example aggregated csv’s and figures. - The sweep_variables parameter is a list of simulation tags from the experiment that the user would like attached to each simulation. For example, Run_Number to track the random seed, or SMC_Coverage if the experiment sweeps over SMC coverage. - The channels is an optional parameter as it takes default values if not specified. It is included in this analyzer so the user has the flexibility to extract different channels from InsetChart.json if needed. If the same channels are always used, one could instead hard code the desired channel names into self.channels and remove the optional argument.\n\nclass MonthlyInsetChartAnalyzer(IAnalyzer):\n    def __init__(self, expt_name, sweep_variables=None, channels=None, working_dir=\".\", start_year=2022):\n        super(MonthlyInsetChartAnalyzer, self).__init__(working_dir=working_dir, filenames=[\"output/InsetChart.json\"])\n        self.sweep_variables = sweep_variables or [\"Run_Number\"]\n        self.channels = channels or  ['Statistical Population', 'New Clinical Cases', 'New Severe Cases', 'PfHRP2 Prevalence']\n        self.expt_name = expt_name\n        self.start_year = start_year\n\n\n\nMap simulation data\nThe map is a custom function that will change the most when adapting an analyzer to different EMOD outputs. Do not change the function definition (the line beginning def map()).\nEMOD output from the requested output file(s) is stored in data. The first activity of map() is therefore to extract the desired data out of data. data is a dictionary where the keys are the filenames stored in self.filenames and the values are the content of each file.\nIn this example using InsetChart.json, we read in the data from the json file, keeping only channels that have been specified in self.channels, and convert into a pandas dataframe. The dataframe will have one column for each channel, and each row is the channel value for each timestep in the simulation.\nNext, we want to convert the timesteps (row number) into calendar dates. Those are the next 5 lines. We copy simdata.index into simdata['Time'] and create additional variables for Day, Month and Year that are easier to work with, as well as a date column that is a datetime.date object.\nFinally, the sweep variables corresponding to the simulation tags of the experiment are attached, the dataframe is returned, and the returned dataframe is automatically passed on to the next and final step of the analyzer. It is not required to return a dataframe but it is required to return something: the data of interest from the simulation.\n\n    def map(self, data, simulation):\n        simdata = pd.DataFrame({x: data[self.filenames[0]]['Channels'][x]['Data'] for x in self.inset_channels})\n        simdata['Time'] = simdata.index\n        simdata['Day'] = simdata['Time'] % 365\n        simdata['Month'] = simdata['Day'].apply(lambda x: self.monthparser((x + 1) % 365))\n        simdata['Year'] = simdata['Time'].apply(lambda x: int(x / 365) + self.start_year)\n        simdata['date'] = simdata.apply(lambda x: datetime.date(int(x['Year']), int(x['Month']), 1), axis=1)\n        for sweep_var in self.sweep_variables:\n            if sweep_var in simulation.tags.keys():\n                simdata[sweep_var] = simulation.tags[sweep_var]\n        return simdata\n\n\n\nReduce\nThis part checks the simulation data returned by map() and aggregates data across all simulations in the experiment into the adf dataframe. In this example, the analyzer saves results into the specified working_dir/expt_name subfolder. Other analyzers may use the reduce() function to plot and save a figure.\nWe typically do not modify the first 4 lines of reduce() (creation of selected and checking that it contains data). If map() returns a dataframe, then the adf = ... line can stay the same as well. Everything after that should be customized to the user’s needs.\n\n    def map(self, all_data):\n        selected = [data for sim, data in all_data.items()]\n        if len(selected) == 0:\n            print(\"No data have been returned... Exiting...\")\n            return\n        adf = pd.concat(selected).reset_index(drop=True)\n        if not os.path.exists(os.path.join(self.working_dir, self.expt_name)):\n            os.mkdir(os.path.join(self.working_dir, self.expt_name))\n        adf.to_csv(os.path.join(self.working_dir, self.expt_name, 'All_Age_Monthly_Cases.csv'), index=False)\n\n\n\nOptional analyzer extensions and helper functions\nFor instance selecting only simulations with SMC_Coverage at 0.5:\n\n    def filter(self, simulation):\n        return simulation.tags[\"SMC_Coverage\"] == 0.5\n\nHelper function to convert months.\n\n    @classmethod\n    def monthparser(self, x):\n        if x == 0:\n            return 12\n        else:\n            return datetime.datetime.strptime(str(x), '%j').month",
    "crumbs": [
      "EMOD How-To Guides",
      "Analyzer Guides"
    ]
  },
  {
    "objectID": "expectations/expectations_presentations.html",
    "href": "expectations/expectations_presentations.html",
    "title": "Presentation Expectations",
    "section": "",
    "text": "Back to Program Handbook\n\nPresentation 0: Introductory Research Talk\nA 30-minute talk showcasing 1 or 2 past or current projects to introduce yourself, your work, and your interests to the program participants, program staff, and team at Northwestern.\n\n\nPresentation 1: Specific Aims Presentation\nA 15-minute talk presenting the proposed research project using EMOD that you will be carrying out in the remainder of the program. Focus on the motivation, background, and proposed approach. Do not present results. This presentation will be followed by a feedback session with the other participants and program staff.\n\n\nPresentation 2: Work-in-Progress Presentation\nA 20-minute talk presenting the research project. Focus on the motivation, background, approach, initial results, and next steps. This presentation will be followed by a feedback session with the other participants and program staff.\n\n\nPresentation 3: Final Project Presentation\nA 30-minute talk presenting the research project. Focus on the motivation, background, approach, results, interpretation, and next steps. This presentation will be followed by a feedback session with the other participants and program staff."
  },
  {
    "objectID": "about/people.html",
    "href": "about/people.html",
    "title": "Our Team",
    "section": "",
    "text": "Program People"
  },
  {
    "objectID": "about/successes.html",
    "href": "about/successes.html",
    "title": "Successes",
    "section": "",
    "text": "Progress and projects so far"
  },
  {
    "objectID": "resources/science_communication.html",
    "href": "resources/science_communication.html",
    "title": "Science Communication",
    "section": "",
    "text": "Resources for sharing your findings\n\n\n\n\n\n\n\n\n\n\n\nWriting Tips\n\n\n\n\n\n\n\n\n\n\nPresentation Tips\n\n\n\n\n\n\n\n\n\n\nData Visualization Tips\n\n\n\n\n\n\n\nNo matching items",
    "crumbs": [
      "Additional Resources",
      "Science Communication"
    ]
  },
  {
    "objectID": "resources/articles/journal_club.html",
    "href": "resources/articles/journal_club.html",
    "title": "Journal Club",
    "section": "",
    "text": "Expectations for Journal Club\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items\n\n\nSelected papers for 2023 program discussions\n\n\n\n\n\n\n\nJournal Club 0: Use of Mathematical Modeling in WHO Guidelines\n\n\n\n\n\n\nLo, N. C., Andrejko, K., Shukla, P., Baker, T., Sawin, V. I., Norris, S. L., Lewnard, J. A.\n\n\n\n\n\n\n\n\n\n\n\nJournal Club 1: High-Burden High-Impact Modeling: Nigeria Case Study\n\n\n\n\n\n\nOzodiegwu, I.D., Ambrose, M., Galatas, B., et al.\n\n\n\n\n\n\n\n\n\n\n\nJournal Club 2: Seasonality of Transmission and Interventions\n\n\n\n\n\n\nSelvaraj, P., Wenger, E.A., Gerardin, J.\n\n\n\n\n\n\n\n\n\n\n\nJournal Club 3: PMC + RTS,S\n\n\n\n\n\n\nRunge M., Stahlfeld A., Ambrose M., et al.\n\n\n\n\n\n\n\n\n\n\n\nJournal Club 4: Efficiency of Intervention Allocation\n\n\n\n\n\n\nWalker, P. G., Griffin, J. T., Ferguson, N. M., Ghani, A. C.\n\n\n\n\n\n\n\n\n\n\n\nJournal Club 5: Subnational Tailoring in Tanzania\n\n\n\n\n\n\nRunge, M., Thawer, S.G., Molteni, F., et al.\n\n\n\n\n\n\n\n\n\n\n\nJournal Club 6: Reactive Case Detection in Zambia\n\n\n\n\n\n\nGerardin, J., Bever, C.A., Bridenbecker D., et al.\n\n\n\n\n\n\n\n\n\n\n\nJournal Club 7: Diagnostics for Malaria Elimination\n\n\n\n\n\n\nSlater, H., Ross, A., Ouédraogo, A., et al.\n\n\n\n\n\n\n\n\n\n\n\nJournal Club 8: Cross-Model Comparisons\n\n\n\n\n\n\nPenny, M. A., Verity, R., Bever, C. A., et al.\n\n\n\n\n\n\n\n\nNo matching items",
    "crumbs": [
      "2023 Program",
      "Journal Club"
    ]
  },
  {
    "objectID": "resources/articles/journal_club_articles/journal_club_3.html",
    "href": "resources/articles/journal_club_articles/journal_club_3.html",
    "title": "Journal Club 3: PMC + RTS,S",
    "section": "",
    "text": "Back to Journal Club\nPerennial malaria chemoprevention with and without malaria vaccination to reduce malaria burden in young children: a modeling analysis\nContext: We use data to inform model inputs for configuration, campaigns, and demographics. This paper provides a good example of data informing transmission and intervention coverage assumptions.\nPlease read the journal club paper and come prepared to discuss your thoughts. If you are facilitating the session, prepare an overview of the paper and at least four guiding questions.\nLeader:\n\nLearning Objectives\n\nDiscuss how DHS data can be used to inform country-specific model parameters\nExplain potential assumptions and adjustment requirements for model input that are dependent on data context\nDiscuss differences in operational and target coverage, and how we may think about them for modeling questions\n\n\n\nGuiding Questions\n\n\n\n\n\n\n\n\nRecommended further reading\n\nOzodiegwu, I. D., Ambrose, M., Battle, K. E., Bever, C., Diallo, O., Galatas, B., … & Gerardin, J. (2021). Beyond national indicators: adapting the Demographic and Health Surveys’ sampling strategies and questions to better inform subnational malaria intervention policy. Malaria journal, 20(1), 1-7"
  },
  {
    "objectID": "resources/articles/journal_club_articles/journal_club_2.html",
    "href": "resources/articles/journal_club_articles/journal_club_2.html",
    "title": "Journal Club 2: Seasonality of Transmission and Interventions",
    "section": "",
    "text": "Back to Journal Club\nSeasonality and heterogeneity of malaria transmission determine success of interventions in high-endemic settings: a modeling study\nContext: Last week we discussed the importance of calibrating models to match what has been observed in the “real world”. Sometimes, however, fundamental quantities underpinning malaria transmission (mosquito populations, immunity levels, etc.) are essentially impossible to measure. For journal club this week, we’ll discuss an article in which the authors leverage EMODs acquired immunity model and use seasonal parasite densities to capture transmission trends despite limited entomological data.\nPlease read the journal club paper and come prepared to discuss your thoughts. If you are facilitating the session, prepare an overview of the paper and at least four guiding questions.\nLeader:\n\nLearning Objectives\n\nDescribe the importance of capturing transmission levels and seasonality in model setup\n\nUnderstand how seasonality and transmission can impact malaria interventions\n\n\n\nGuiding Questions\n\n\n\n\n\n\n\n\nRecommended additional reading\n\nNikolov, M., Bever, C. A., Upfill-Brown, A., Hamainza, B., Miller, J. M., Eckhoff, P. A., … & Gerardin, J. (2016). Malaria elimination campaigns in the Lake Kariba region of Zambia: a spatial dynamical model. PLoS computational biology, 12(11), e1005192."
  },
  {
    "objectID": "resources/articles/journal_club_articles/journal_club_1.html",
    "href": "resources/articles/journal_club_articles/journal_club_1.html",
    "title": "Journal Club 1: High-Burden High-Impact Modeling: Nigeria Case Study",
    "section": "",
    "text": "Back to Journal Club\nApplication of mathematical modelling to inform national malaria intervention planning in Nigeria\nContext: In this week you have learned how the EMOD building blocks come together in a series of simulation experiments and scenarios across parameter sweeps. One of the most complex yet practical experiment setup can be found in modeling intervention impact in countries.\nPlease read the journal club paper on such an application of modeling in Nigeria and come prepared to discuss your thoughts\nLeader:\n\nLearning Objectives\n\nDiscuss a practical use case that demonstrates how EMOD building blocks and simulation steps come together to address a common question in malaria intervention planning\nUnderstand types of questions that malaria models can be used to answer\n\n\n\nGuiding Questions"
  },
  {
    "objectID": "resources/articles/journal_club_articles/journal_club_4.html",
    "href": "resources/articles/journal_club_articles/journal_club_4.html",
    "title": "Journal Club 4: Efficiency of Intervention Allocation",
    "section": "",
    "text": "Back to Journal Club\nEstimating the most efficient allocation of interventions to achieve reductions in Plasmodium falciparum malaria burden and transmission in Africa: a modelling study\nContext: Often, we are interested in comparing various intervention scenarios using modeling to inform policymakers about the efficiency of allocation in controlling malaria.\nPlease read the journal club paper and come prepared to discuss your thoughts. If you are facilitating the session, prepare an overview of the paper and at least four guiding questions.\nLeader:\n\nLearning Objectives\n\nUnderstand how modeling approaches can evaluate the impact of different intervention scenarios\nDiscuss different methods of thinking about efficiency and so-called optimal allocation in terms of cost, reducing burden and transmission, and scaling of implementation.\n\n\n\nGuiding Questions"
  },
  {
    "objectID": "resources/data_sources/DHS_surveys.html",
    "href": "resources/data_sources/DHS_surveys.html",
    "title": "DHS Surveys",
    "section": "",
    "text": "Demographic & Health Surveys\n\n\n\n\n\n\n\n\n\n\n\n\nQuerying the DHS API in R\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "resources/data_sources/DHS_pages/DHS via API.html",
    "href": "resources/data_sources/DHS_pages/DHS via API.html",
    "title": "Querying the DHS API in R",
    "section": "",
    "text": "Call the DHS application program interface (API) from R\n\nWalkthrough\n\nLoad Packages\nknitr::opts_chunk$set(echo = TRUE)\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(DT)\n\n\nSet up query\n# Abbreviated country code, check list here:\n# https://dhsprogram.com/data/File-Types-and-Names.cfm#CP_JUMP_10136\n\ncountryIds=c('BF') # countryIDs in quotes, separated by commas if multiple\n\n# Level of stratification ('national' or 'subnational')\n\nbreakdown=c('subnational')\n\n# Indicator(s) of interest. For a full list of 3,785 DHS indicators, look here:\n# https://api.dhsprogram.com/rest/dhs/indicators?returnFields=IndicatorId,Label,Definition&f=html\n#  \n# Example malaria indicators:\n# - CH_FEVR_C_FEV = % of children U5 (or U3) with fever in the 2 weeks preceding the survey\n# - ML_FEVT_C_ADV   = % of children U5 with recent (&lt;2wk) fever for whom advice/treatment was sought\n# - ML_NETP_H_ITN = % of households with at least 1 ITN\n# - ML_IRSM_H_IRS = % of households with IRS in the last 12 months\n# - ML_PMAL_C_RDT = Malaria prevalence among children age 6-59 months tested by RDT \n# - ML_PMAL_C_RDL = Lower limit of 95% CI for ML_PMAL_C_RDT\n# - ML_PMAL_C_RDU = Upper limit of 95% CI for ML_PMAL_C_RDT\n#\n# Note: some indicators may not apply to all countries/districts/surveys\n\nindicatorIds=c('ML_IRSM_H_IRS','ML_NETP_H_ITN','ML_FEVT_C_ADV','ML_PMAL_C_RDT', 'ML_PMAL_C_RDL', 'ML_PMAL_C_RDU')\n\n\nExecute query & plot results\n#### Build API Query ####\n\nbase_url &lt;- \"http://api.dhsprogram.com/rest/dhs/data?f=json&surveyid=all\"\nend_url &lt;- \"&lang=en&f=json\"\nurl &lt;- paste(base_url,\n             \"&countryIds=\",paste(countryIds,collapse=','),\n             \"&breakdown=\",breakdown,\n             \"&indicatorIds=\",paste(indicatorIds,collapse=','),\n             end_url,\n             sep = '')\nurl &lt;- (url)\n\n\n#### Call API ####\n\ndhs_data &lt;- fromJSON(url) # get page\ndhs_data &lt;- dhs_data$Data # save dataframe\n\n\n#### Plot Results ###\n\n# Trends in intervention indicators by country-region \ndhs_data %&gt;% \n  filter(!IndicatorId %in% c('ML_PMAL_C_RDT', 'ML_PMAL_C_RDL', 'ML_PMAL_C_RDU')) %&gt;%\n  ggplot(aes(x=SurveyYear, y=Value, color = Indicator)) +\n  geom_line(size=1) +\n  geom_point(size=2, shape=21, fill=\"white\") +\n  facet_wrap(~paste(CountryName,CharacteristicLabel,sep='-'), ncol=5) +\n  theme_minimal() +\n  theme(legend.position=\"bottom\",\n        legend.justification = c(0,0),\n        axis.text.x=element_text(angle=90, vjust=0.5),\n        panel.grid.minor.x = element_blank()) +\n  scale_x_continuous(breaks=seq(2000,2020,1)) +\n  guides(color=guide_legend(direction = \"vertical\")) +\n  labs(color=NULL)\n\n# RDT Prevalence trends by country-region (where available)\ndhs_data %&gt;% \n  filter(IndicatorId %in% c('ML_PMAL_C_RDT', 'ML_PMAL_C_RDL', 'ML_PMAL_C_RDU')) %&gt;%\n  ggplot(aes(x=SurveyYear, y=Value)) +\n  geom_line(aes(group=SurveyYear)) +\n  geom_line(data=dhs_data[dhs_data$IndicatorId==\"ML_PMAL_C_RDT\",],\n            size=1) +\n  geom_point(size=2, shape=21, fill=\"white\") +\n  facet_wrap(~paste(CountryName,CharacteristicLabel,sep='-'), ncol=5) +\n  theme_minimal() +\n  theme(legend.position=\"bottom\",\n        legend.justification = c(0,0),\n        axis.text.x=element_text(angle=90, vjust=0.5),\n        panel.grid.minor.x = element_blank()) +\n  scale_x_continuous(breaks=seq(2000,2025,1)) +\n  guides(color=guide_legend(direction = \"vertical\")) +\n  ylab(\"Malaria Prevalence by RDT (U5)\") +\n  labs(color=NULL) \n\n\n\nGet list of available indicators\nThis section generates an interactive table of indicators at the subnational level for selected surveys/countries/indicators. As written, this code is useful for seeing which indicators were reported and when, for a given area.\n\n\n\n\n\n\nThis code is very slow!\n\n\n\n\n\n\n##########################################################\n### View sample of available data for select countries ###\n##########################################################\n\n\n# 1. Get list of surveys from selected countries\n################################################\n\ncountryIds=c('BF') # selected country\n\n### Build Query ###\nbase_url &lt;- \"http://api.dhsprogram.com/rest/dhs/surveys?f=json\"\n\nurl &lt;- paste(base_url,\n             \"&countryIds=\",paste(countryIds,collapse=','),\n             end_url,\n             sep = '')\nurl &lt;- (url)\n\n### Call API ###\nsurveys &lt;- fromJSON(url) # get page\nsurveys &lt;- surveys$Data # save dataframe\n\nsurveyIds &lt;- surveys$SurveyId\n\n# 2. Set list of indicators\n###############################################\n\n# You can use all of the malaria indicators below, or a subset, or create a list of any indicators (including non-malaria).\n\nmalaria_indicators &lt;- c(\"ML_NETP_H_MOS\",\"ML_NETP_H_ITN\",\"ML_NETP_H_LLN\",\"ML_NETP_H_MNM\",\"ML_NETP_H_MNI\",\"ML_NETP_H_MNL\",\"ML_NETP_H_NUM\",\"ML_NETP_H_UNW\",\"ML_NETP_H_MS2\",\"ML_NETP_H_IT2\",\"ML_NETP_H_LL2\",\"ML_NETP_H_NM2\",\"ML_NETP_H_UN2\",\"ML_IRSM_H_IRS\",\"ML_IRSM_H_IIR\",\"ML_IRSM_H_I2I\",\"ML_IRSM_H_NUM\",\"ML_IRSM_H_UNW\",\"ML_ITNA_P_NUM\",\"ML_ITNA_P_UNW\",\"ML_ITNA_P_ACC\",\"ML_NETU_P_ANY\",\"ML_NETU_P_ITN\",\"ML_NETU_P_LLN\",\"ML_NETU_P_ITI\",\"ML_NETU_P_NUM\",\"ML_NETU_P_UNW\",\"ML_NETU_P_IT1\",\"ML_NETU_P_NM1\",\"ML_NETU_P_UN1\",\"ML_ITNU_N_ITN\",\"ML_ITNU_N_NUM\",\"ML_ITNU_N_UNW\",\"ML_NETC_C_ANY\",\"ML_NETC_C_ITN\",\"ML_NETC_C_LLN\",\"ML_NETC_C_ITI\",\"ML_NETC_C_NUM\",\"ML_NETC_C_UNW\",\"ML_NETC_C_IT1\",\"ML_NETC_C_NM1\",\"ML_NETC_C_UN1\",\"ML_NETW_W_ANY\",\"ML_NETW_W_ITN\",\"ML_NETW_W_LLN\",\"ML_NETW_W_ITI\",\"ML_NETW_W_NUM\",\"ML_NETW_W_UNW\",\"ML_NETW_W_IT1\",\"ML_NETW_W_NM1\",\"ML_NETW_W_UN1\",\"ML_IPTP_W_SPF\",\"ML_IPTP_W_2SP\",\"ML_IPTP_W_3SP\",\"ML_IPTP_W_SPA\",\"ML_IPTP_W_2SA\",\"ML_IPTP_W_3SA\",\"ML_IPTP_W_NUM\",\"ML_IPTP_W_UNW\",\"ML_FEVR_C_FEV\",\"ML_FEVR_C_NUM\",\"ML_FEVR_C_UNW\",\"ML_FEVT_C_ADV\",\"ML_FEVT_C_BLD\",\"ML_FEVT_C_ACT\",\"ML_FEVT_C_ACS\",\"ML_FEVT_C_AML\",\"ML_FEVT_C_AMS\",\"ML_FEVT_C_NUM\",\"ML_FEVT_C_UNW\",\"ML_AMLD_C_ACT\",\"ML_AMLD_C_QNN\",\"ML_AMLD_C_SPF\",\"ML_AMLD_C_CHL\",\"ML_AMLD_C_AMQ\",\"ML_AMLD_C_NUM\",\"ML_AMLD_C_OAM\",\"ML_AMLD_C_UNW\",\"ML_CMLT_C_ANM\",\"ML_CMLT_C_RDT\",\"ML_CMLT_C_MSY\",\"ML_CMLT_C_NUM\",\"ML_HEMO_C_HL8\",\"ML_HEMO_C_NUM\",\"ML_HEMO_C_UNW\",\"ML_PMAL_C_RDT\",\"ML_PMAL_C_RDE\",\"ML_PMAL_C_RDR\",\"ML_PMAL_C_RDL\",\"ML_PMAL_C_RDU\",\"ML_PMAL_C_NMR\",\"ML_PMAL_C_UNR\",\"ML_PMAL_C_UER\",\"ML_PMAL_C_MSY\",\"ML_PMAL_C_MSE\",\"ML_PMAL_C_MSR\",\"ML_PMAL_C_MSL\",\"ML_PMAL_C_MSU\",\"ML_PMAL_C_NMM\",\"ML_PMAL_C_UNM\",\"ML_PMAL_C_UEM\",\"ML_NSRC_N_MDC\",\"ML_NSRC_N_ANC\",\"ML_NSRC_N_IMM\",\"ML_NSRC_N_GHF\",\"ML_NSRC_N_PHF\",\"ML_NSRC_N_PHM\",\"ML_NSRC_N_SHP\",\"ML_NSRC_N_CHW\",\"ML_NSRC_N_REL\",\"ML_NSRC_N_SCL\",\"ML_NSRC_N_OTH\",\"ML_NSRC_N_DKM\",\"ML_NSRC_N_TOT\",\"ML_NSRC_N_NUM\",\"ML_FEVT_C_ADS\",\"ML_AMLD_C_ART\")\n\nindicatorIds= malaria_indicators    # An empty string '' will query ALL indicators (probably very slow)\n\ncounter=0\nfor(survey in surveyIds)\n{\n  for(indicator in indicatorIds)\n  {\n    ### Build Query ###\n    base_url &lt;- \"http://api.dhsprogram.com/rest/dhs/data?f=json\"\n\n    url &lt;- paste(base_url,\n                 \"&surveyIds=\",survey,\n                 \"&breakdown=\",breakdown,\n                 \"&indicatorIds=\",indicator,\n                 end_url,\n                 sep = '')\n    url &lt;- (url)\n    \n    ### Call API ###\n    indicators_temp &lt;- fromJSON(url) # get page\n    if(!is_empty(indicators_temp$Data))\n    {\n      if(counter==0)\n      {\n        indicators &lt;- indicators_temp$Data\n      }\n      else\n      {\n        indicators &lt;- rbind.data.frame(indicators,indicators_temp$Data)\n      }\n      counter &lt;- counter+1\n    }\n  }\n}\n\n### Inspect Available Data ### \n\n#summary(dhs_data)\n\nindicators %&gt;%\n  select(SurveyId, IndicatorId, Indicator, IsPreferred, Value,CharacteristicLabel, ByVariableLabel) %&gt;%\n  datatable(filter=\"top\", options = list(pageLength = 20, dom = 'ftlip'))"
  },
  {
    "objectID": "resources/data_sources/MAP_rasters.html",
    "href": "resources/data_sources/MAP_rasters.html",
    "title": "MAP Rasters",
    "section": "",
    "text": "Estimates from Malaria Atlas Project\n\n\n\n\n\n\n\n\n\n\n\n\nMAP Rasters Walkthrough\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "resources/data_sources/MAP_pages/MAP_overview.html",
    "href": "resources/data_sources/MAP_pages/MAP_overview.html",
    "title": "MAP Overview",
    "section": "",
    "text": "(add details)"
  },
  {
    "objectID": "resources/coding_resources/quest_resources.html",
    "href": "resources/coding_resources/quest_resources.html",
    "title": "QUEST",
    "section": "",
    "text": "Back to Coding Resources\nNorthwestern’s High-Performance Computing (HPC) cluster is ideal to run compute-intensive and data-intensive applications.\nNorthwestern’s University’s high performance computing (HPC) system is called Quest, you can read more about Quest here.\nGood to know:\n\nConnect to Quest using the software MobaXterm Home Edition or FastX .\nThe Quest Quick Start Guide provide useful information to get started and find help to common questions and issues when using Quest.\n\nThe Navigating Quest via Shell youtube video from Northwestern Research Computing Team (they have many more resources!) can help you learn about basic bash commands and moving between directories\n\nSLURM guide - On the cluster, the SLURM job scheduling system is used"
  },
  {
    "objectID": "resources/coding_resources/python_resources.html",
    "href": "resources/coding_resources/python_resources.html",
    "title": "Python",
    "section": "",
    "text": "Back to Coding Resources\nPython is a high-level, general-purpose programming language.\n\nPython Resources\nPycharm Community Edition (IDE for python)\n\nUseful keyboard shortcuts and plugins\n\nLearn python\nCode academy contains some free lessons and tutorials for beginner to advanced python and other coding skills. Be sure to filter by price.\nPython for Biologists\nPython Data Science Handbook\nUsing pandas (includes comparisons to R libraries)"
  },
  {
    "objectID": "resources/coding_resources/r_resources.html",
    "href": "resources/coding_resources/r_resources.html",
    "title": "R",
    "section": "",
    "text": "Back to Coding Resources\nR is a programming language for statistical computing and graphics.\n\nRStudio Cheatsheets\nR Syntax Cheatsheet\nBase R Cheatsheet\nRMarkdown Cheatsheet\ntidyr Data Importation Cheatsheet\ntidyr Data Cleaning Cheatsheet\ndplyr Data Transformation Cheatsheet\nstringr String Manipulation Cheatsheet\nsf Spatial Manipulation Cheatsheet\nggplot2 Data Visualization Cheatsheet\n\n\nData Carpentry Resources\nData Carpentry - Manipulating Data with tidyr and dplyr\nData Carpentry - R for Geospatial Data\n\n\nEpidemiologist R Handbook\nEpiRHandbook - English\nEpiRHandbook - Français"
  },
  {
    "objectID": "resources/science_communication/writing_pages/grants.html",
    "href": "resources/science_communication/writing_pages/grants.html",
    "title": "Grant Proposals",
    "section": "",
    "text": "Back to Writing Resources\n\nVideo 1: Rhetorical Pattern of Introductions in Aims Pages Patterns\n\nVideo 2: Specific Aims\n\nTen simple rules for getting grants\n\nMore from the PLoS Curated Collections"
  },
  {
    "objectID": "resources/science_communication/writing.html",
    "href": "resources/science_communication/writing.html",
    "title": "Writing Tips",
    "section": "",
    "text": "Back to Science Communication Resources\n\n\n\n\n\n\n\nGrant Proposals\n\n\n\n\n\n\n\n\n\n\nManuscripts\n\n\n\n\n\n\n\nNo matching items\n\n\nTen simple rules for improving your writing productivity\nWriting readable sentences\nCreating coherent paragraphs\nPLoS Writing Center - A collection of free, practical guides and hands-on resources for authors looking to improve their scientific publishing skillset.\nNIH Grant Application Format Guidelines"
  },
  {
    "objectID": "resources/science_communication/data_visualization.html",
    "href": "resources/science_communication/data_visualization.html",
    "title": "Data Visualization Tips",
    "section": "",
    "text": "Back to Science Communication Resources\n\nTen simple rules for better figures\n\nMore from the PLoS Curated Collections"
  }
]